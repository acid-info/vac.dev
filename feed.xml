<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://vac.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://vac.dev/" rel="alternate" type="text/html" /><updated>2022-05-25T08:27:01+00:00</updated><id>https://vac.dev/feed.xml</id><title type="html">Vac</title><subtitle>Vac is a modular peer-to-peer messaging stack, with a focus on secure messaging.</subtitle><entry><title type="html">Noise handshakes as key-exchange mechanism for Waku</title><link href="https://vac.dev/wakuv2-noise" rel="alternate" type="text/html" title="Noise handshakes as key-exchange mechanism for Waku" /><published>2022-05-17T08:00:00+00:00</published><updated>2022-05-17T08:00:00+00:00</updated><id>https://vac.dev/noise</id><content type="html" xml:base="https://vac.dev/wakuv2-noise">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_CHTML&quot;&gt;
&lt;/script&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [['$','$'], ['\\(','\\)']],
      processEscapes: true},
      jax: [&quot;input/TeX&quot;,&quot;input/MathML&quot;,&quot;input/AsciiMath&quot;,&quot;output/CommonHTML&quot;],
      extensions: [&quot;tex2jax.js&quot;,&quot;mml2jax.js&quot;,&quot;asciimath2jax.js&quot;,&quot;MathMenu.js&quot;,&quot;MathZoom.js&quot;,&quot;AssistiveMML.js&quot;, &quot;[Contrib]/a11y/accessibility-menu.js&quot;],
      TeX: {
      extensions: [&quot;AMSmath.js&quot;,&quot;AMSsymbols.js&quot;,&quot;noErrors.js&quot;,&quot;noUndefined.js&quot;],
      equationNumbers: {
      autoNumber: &quot;AMS&quot;
      }
    }
  });
&lt;/script&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this post we will provide an overview of how &lt;a href=&quot;https://rfc.vac.dev/spec/10/&quot;&gt;Waku v2&lt;/a&gt; users can adopt &lt;a href=&quot;http://www.noiseprotocol.org/noise.html&quot;&gt;Noise handshakes&lt;/a&gt; to agree on cryptographic keys used to securely encrypt messages.&lt;/p&gt;

&lt;p&gt;This process belongs to the class of &lt;em&gt;key-exchange&lt;/em&gt; mechanisms, consisting of all those protocols that, with different levels of complexity and security guarantees, allow two parties to publicly agree on a secret without letting anyone else know what this secret is.&lt;/p&gt;

&lt;p&gt;But why do we need key-exchange mechanisms in the first place?&lt;/p&gt;

&lt;p&gt;With the advent of &lt;a href=&quot;https://en.wikipedia.org/wiki/Public-key_cryptography&quot;&gt;public-key cryptography&lt;/a&gt;, it become possible to decouple encryption from decryption through use of two distinct cryptographic keys: one &lt;em&gt;public&lt;/em&gt;, used to encrypt information and that can be made available to anyone, and one &lt;em&gt;private&lt;/em&gt; (kept secret), which enables decryption of messages encrypted with its corresponding public key. The same does not happen in the case of &lt;a href=&quot;https://en.wikipedia.org/wiki/Symmetric-key_algorithm&quot;&gt;symmetric encryption schemes&lt;/a&gt; where, instead, the same key is used for both encryption and decryption operations and hence cannot be publicly revealed as for public keys.&lt;/p&gt;

&lt;p&gt;In order to address specific application needs, many different public, symmetric and hybrid cryptographic schemes were designed: &lt;a href=&quot;https://rfc.vac.dev/spec/6/&quot;&gt;Waku v1&lt;/a&gt; and &lt;a href=&quot;https://rfc.vac.dev/spec/10/&quot;&gt;Waku v2&lt;/a&gt;, which inherits part of their design from the Ethereum messaging protocol &lt;a href=&quot;https://ethereum.org/en/developers/docs/networking-layer/#whisper&quot;&gt;Whisper&lt;/a&gt;, provide &lt;a href=&quot;https://rfc.vac.dev/spec/26/&quot;&gt;support&lt;/a&gt; to both public-key primitives (&lt;a href=&quot;https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ECIES&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ECDSA&lt;/code&gt;&lt;/a&gt;) and symmetric primitives (&lt;a href=&quot;https://en.wikipedia.org/wiki/Galois/Counter_Mode&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AES-256-GCM&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/SHA-3&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KECCAK-256&lt;/code&gt;&lt;/a&gt;), used to sign, hash, encrypt and decrypt exchanged messages.&lt;/p&gt;

&lt;p&gt;In principle, when communications employ public-key based encryption schemes (&lt;code class=&quot;highlighter-rouge&quot;&gt;ECIES&lt;/code&gt;, in the case of Waku), there is no need for a key-agreement among parties: messages can be directly encrypted using the recipient’s public-key before being sent over the network. However, public-key encryption and decryption primitives are usually very inefficient in processing large amount of data, and this may constitute a bottleneck for many of today’s applications. Symmetric encryption schemes such as &lt;code class=&quot;highlighter-rouge&quot;&gt;AES-256-GCM&lt;/code&gt;, on the other hand, are much more efficient, but the encryption/decryption key needs to be shared among users beforehand any encrypted messages is exchanged.&lt;/p&gt;

&lt;p&gt;To counter the downsides given by each of these two approaches while taking advantage of their strengths, hybrid constructions were designed. In these, public-key primitives are employed to securely agree on a secret key which, in turn, is used with a symmetric cipher for encrypting messages. In other words, such constructions specify a (public-key based) key-agreement mechanism!&lt;/p&gt;

&lt;p&gt;Waku, up to &lt;a href=&quot;https://rfc.vac.dev/spec/14/#payload-encryption&quot;&gt;payload version 1&lt;/a&gt;, does not implement nor recommend any protocol for exchanging symmetric ciphers’ keys, leaving such task to the application layer. It is important to note that the kind of key-agreement employed has a direct impact on the security properties that can be granted on later encrypted messages, while security requirements usually depend on the specific application for which encryption is needed in the first place.&lt;/p&gt;

&lt;p&gt;In this regard, &lt;a href=&quot;https://status.im&quot;&gt;Status&lt;/a&gt;, which  builds on top of Waku, &lt;a href=&quot;https://specs.status.im/spec/5&quot;&gt;implements&lt;/a&gt; a custom version of the &lt;a href=&quot;https://signal.org/docs/specifications/x3dh/&quot;&gt;X3DH&lt;/a&gt; key-agreement protocol, in order to allow users to instantiate end-to-end encrypted communication channels. However, although such a solution is optimal when applied to (distributed) E2E encrypted chats, it is not flexible enough to fit or simplify the variety of applications Waku aims to address.
Hence, proposing and implementing one or few key-agreements which provide certain (presumably &lt;em&gt;strong&lt;/em&gt;) security guarantees, would inevitably degrade performances of all those applications for which, given their security requirements, more tailored and efficient key-exchange mechanisms can be employed.&lt;/p&gt;

&lt;p&gt;Guided by different examples, in the following sections we will overview Noise, a protocol framework we are &lt;a href=&quot;https://rfc.vac.dev/spec/35/&quot;&gt;currently integrating&lt;/a&gt; in Waku, for building secure key-agreements between two parties. One of the great advantage of using Noise is that it is possible to add support to new key-exchanges by just specifying users’ actions from a predefined list, requiring none to minimal modifications to existing implementations. Furthermore, Noise provides a framework to systematically analyze protocols’ security properties and the corresponding attacker threat models. This allows not only to easily design new key-agreements eventually optimized for specific applications we want to address, but also to easily analyze or even &lt;a href=&quot;https://noiseexplorer.com/&quot;&gt;formally verify&lt;/a&gt; any of such custom protocol!&lt;/p&gt;

&lt;p&gt;We believe that with its enormous flexibility and features, Noise represents a perfect candidate for bringing key-exchange mechanisms in Waku.&lt;/p&gt;

&lt;h2 id=&quot;the-diffie-hellman-key-exchange&quot;&gt;The Diffie-Hellman Key-exchange&lt;/h2&gt;

&lt;p&gt;The formalization of modern public-key cryptography started with the pioneering work of Whitefield Diffie and Martin Hellman, who detailed one of the earliest known key-agreement protocols: the famous &lt;a href=&quot;https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange&quot;&gt;Diffie-Hellman Key-Exchange&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Diffie-Hellman (DH) key-exchange is largely used today and represents the main cryptographic building block on which Noise handshakes’ security is based.&lt;/p&gt;

&lt;p&gt;In turn, the security of DH is based on a mathematical problem called &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_logarithm&quot;&gt;discrete logarithm&lt;/a&gt; which is believed to be hard when the agreement is practically instantiated using certain &lt;a href=&quot;https://en.wikipedia.org/wiki/Elliptic_curve&quot;&gt;elliptic curves&lt;/a&gt; $E$ defined over finite fields $\mathbb{F}_p$.&lt;/p&gt;

&lt;p&gt;Informally, a DH exchange between Alice and Bob proceeds as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Alice picks a secret scalar $s_A\in\mathbb{F}_p$ and computes, using the underlying &lt;a href=&quot;https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication&quot;&gt;curve’s arithmetic&lt;/a&gt;, the point $P_A = s_A\cdot P\in E(\mathbb{F}_p)$ for a certain pre-agreed public generator $P$ of the elliptic curve $E(\mathbb{F}_p)$. She then sends $P_A$ to Bob.&lt;/li&gt;
  &lt;li&gt;Similarly, Bob picks a secret scalar $s_B\in\mathbb{F}_p$, computes $P_B = s_B\cdot P\in E(\mathbb{F}_p)$ and sends $P_B$ to Alice.&lt;/li&gt;
  &lt;li&gt;By commutativity of scalar multiplication, both Alice and Bob can now compute the point $P_{AB} = s_As_B\cdot P$, using the elliptic curve point received from the other party and their secret scalar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The assumed hardness of computing discrete logarithms in $E(\mathbb{F}&lt;em&gt;p)$, ensures that it is not possible to compute $s_A$ or $s_B$ from $P_A$ and $P_B$, respectively. Another security assumption (named &lt;a href=&quot;https://en.wikipedia.org/wiki/Computational_Diffie%E2%80%93Hellman_assumption&quot;&gt;Computational Diffie-Hellman assumption&lt;/a&gt;) ensures that it is not possible to compute $P&lt;/em&gt;{AB}$ from $P$, $P_A$ and $P_B$. Hence the point $P_{AB}$ shared by Alice and Bob at the end of the above protocol cannot be efficiently computed by an attacker intercepting $P_A$ and $P_B$, and can then be used to generate a secret to be later employed, for example, as a symmetric encryption key.&lt;/p&gt;

&lt;p&gt;On a side note, this protocol shows the interplay between two components typical to public-key based schemes: the scalars $s_A$ and $s_B$ can be seen as &lt;em&gt;private keys&lt;/em&gt; associated to the &lt;em&gt;public keys&lt;/em&gt; $P_A$ and $P_B$, respectively, which allow Alice and Bob only to compute the shared secret point $P_AB$.&lt;/p&gt;

&lt;h2 id=&quot;ephemeral-and-static-public-keys&quot;&gt;Ephemeral and Static Public Keys&lt;/h2&gt;

&lt;p&gt;Although we assumed that it is practically impossible for an attacker to compute the randomly picked secret scalar from the corresponding public elliptic curve point, it may happen that such scalar gets compromised or can be guessed due to a faulty employed random number generator. In such cases, an attacker will be able to recover the final shared secret and all encryption keys eventually derived from that, with clear catastrophic consequences for the privacy of exchanged messages.&lt;/p&gt;

&lt;p&gt;To mitigate such issues, multiple DH operations can be combined using two different types of exchanged elliptic curve points or, better, &lt;em&gt;public keys&lt;/em&gt;: &lt;em&gt;ephemeral keys&lt;/em&gt;, that is random keys used only once in a DH operation, and long-term &lt;em&gt;static keys&lt;/em&gt;, used mainly for authentication purposes since employed multiple times.&lt;/p&gt;

&lt;p&gt;Just to provide an example, let us suppose Alice and Bob perform the following custom DH-based key-exchange protocol:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Alice generates an ephemeral key $E_A=e_A\cdot P$ by picking a random scalar $e_A$ and sends $E_A$ to Bob;&lt;/li&gt;
  &lt;li&gt;Similarly, Bob generates an ephemeral key $E_B=e_B\cdot P$ and sends $E_B$ to Alice;&lt;/li&gt;
  &lt;li&gt;Alice and Bob computes $E_{AB} = e_Ae_B \cdot P$ and from it derive a secret encryption key $k$.&lt;/li&gt;
  &lt;li&gt;Bob sends to Alice his static key $S_B = s_B\cdot P$ encrypted with $k$.&lt;/li&gt;
  &lt;li&gt;Alice encrypts with $k$ her static key $S_A = s_A\cdot P$ and sends it to Bob.&lt;/li&gt;
  &lt;li&gt;Alice and Bob decrypt the received static keys, compute the secret $S_{AB} = s_As_B \cdot P$ and use it together with $E_{AB}$ to derive a new encryption key $\tilde{k}$ to be later used with a symmetric cipher.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this protocol, if Alice’s and/or Bob’s static keys get compromised, it would not possible to derive the final secret key $\tilde{k}$, since at least one ephemeral key among $E_A$ and $E_B$ has to be compromised too in order to recover the secret $E_{AB}$. Furthermore, since Alice’s and Bob’s long-term static keys are encrypted, an attacker intercepting exchanged (encrypted) public keys will not be able to link such communication to Alice or Bob, unless one of the ephemeral key is compromised (and, even in such case, none of the messages encrypted under the key $\tilde{k}$ can be decrypted).&lt;/p&gt;

&lt;h1 id=&quot;the-noise-protocol-framework&quot;&gt;The Noise Protocol Framework&lt;/h1&gt;

&lt;p&gt;In previous section we gave a small intuition on how multiple DH operations over ephemeral and static users’ public keys can be combined to create different key-exchange protocols.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.noiseprotocol.org/noise.html&quot;&gt;Noise Protocol Framework&lt;/a&gt;, defines various rules for building custom key-exchange protocols while allowing easy analysis of the security properties and threat models provided given the type and order of the DH operations employed.&lt;/p&gt;

&lt;p&gt;In Noise terminology, a key-agreement or &lt;em&gt;Noise protocol&lt;/em&gt; consists of one or more &lt;em&gt;Noise handshakes&lt;/em&gt;. During a Noise handshake, Alice and Bob exchange multiple (handshake) messages containing their ephemeral keys and/or static keys. These public keys are then used to perform a handshake-dependent sequence of Diffie-Hellman operations, whose results are all hashed into a shared secret key. Similarly as we have seen above, after a handshake is complete, each party will use the derived secret key to send and receive &lt;a href=&quot;https://en.wikipedia.org/wiki/Authenticated_encryption&quot;&gt;authenticated encrypted data&lt;/a&gt; by employing a symmetric cipher.&lt;/p&gt;

&lt;p&gt;Depending on the &lt;em&gt;handshake pattern&lt;/em&gt; adopted, different security guarantees can be provided on messages encrypted using a handshake-derived key.&lt;/p&gt;

&lt;p&gt;The Noise handshakes we support in Waku all provide the following security properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Confidentiality&lt;/strong&gt;: the adversary should not be able to learn what data is being sent between Alice and Bob.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Strong forward secrecy&lt;/strong&gt;: an active adversary cannot decrypt messages nor infer any information on the employed encryption key, even in the case he has access to Alice’s and Bob’s long-term private keys (during or after their communication).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authenticity&lt;/strong&gt;: the adversary should not be able to cause either Alice or Bob to accept messages coming from a party different than their original senders.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt;: the adversary should not be able to cause Alice or Bob to accept data that has been tampered with.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Identity-hiding&lt;/strong&gt;: once a secure communication channel is established, a passive adversary should not be able to link exchanged encrypted messages to their corresponding sender and recipient by knowing their long-term static keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We refer to &lt;a href=&quot;http://www.noiseprotocol.org/noise.html&quot;&gt;Noise specification&lt;/a&gt; for more formal security definitions and precise threat models relative to Waku &lt;a href=&quot;#Supported-Noise-Handshakes-in-Waku&quot;&gt;supported Noise Handshake patterns&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;message-patterns&quot;&gt;Message patterns&lt;/h2&gt;

&lt;p&gt;Noise handshakes involving DH operations over ephemeral and static keys can be succinctly sketched using the following set of &lt;em&gt;handshake message tokens&lt;/em&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;ee&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;se&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;es&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;ss&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tokens employing single letters denote (the type of) users’ public keys: &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; refers to randomly generated ephemeral key(s), while &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; indicates the users’ long-term static key(s).&lt;/p&gt;

&lt;p&gt;Two letters tokens, instead, denotes DH operations over the two users’ public keys the token refers to, given that the left token letter refers to the handshake &lt;em&gt;initiator’s&lt;/em&gt; public key, while the right token letter indicates the used &lt;em&gt;responder’s&lt;/em&gt; public key. Thus, if Alice started a handshake with Bob, the &lt;code class=&quot;highlighter-rouge&quot;&gt;es&lt;/code&gt; token will shortly represent a DH operation among Alice’s ephemeral key &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; and Bob’s static key &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since, in order to perform any DH operations users need to share (or pre-share) the corresponding public keys, Noise compactly represents messages’ exchanges using the two direction &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;-&lt;/code&gt;, where the &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt; denotes a message (arbitrary and/or DH public key) from the initiator to the responder, while &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;-&lt;/code&gt; the opposite.&lt;/p&gt;

&lt;p&gt;Hence a &lt;em&gt;message pattern&lt;/em&gt; consisting of a direction and one or multiple tokens such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;- e, s, es&lt;/code&gt;  has to be interpreted one token at a time: in this example, the responder is sending his ephemeral and static key to the initiator and is then executing a DH operation over the initiator’s ephemeral key &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; (shared in a previously exchanged message pattern) and his static key &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;. On the other hand, such message indicates also that the initiator received the responder’s ephemeral and static keys &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;, respectively, and performed a DH operation over his ephemeral key and the responder’s just received static key &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;. In this way, both parties will be able to derive at the end of each message pattern processed the same shared secret, which is eventually used to update any derived symmetric encryption keys computed so far.&lt;/p&gt;

&lt;p&gt;In some cases, DH public keys employed in a handshake are pre-shared before the handshake itself starts. In order to chronologically separate exchanged keys and DH operations performed before and during a handshake, Noise employs the &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt; delimiter.&lt;/p&gt;

&lt;p&gt;For example, the following message patterns&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;- e
...
-&amp;gt; e, ee
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;indicates that the initiator knew the responder’s ephemeral key before he sends his own ephemeral key and executes a DH operation between both parties ephemeral keys (similarly, the responder receives the initiator’s ephemeral key and does a &lt;code class=&quot;highlighter-rouge&quot;&gt;ee&lt;/code&gt; DH operation).&lt;/p&gt;

&lt;p&gt;At this point it should be clear how such notation is able to compactly represent a large variety of DH based key-agreements. Nevertheless, we can easily define additional tokens and processing rules in order to address specific applications and security requirements, such as the &lt;a href=&quot;http://www.noiseprotocol.org/noise.html#handshake-tokens&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;psk&lt;/code&gt;&lt;/a&gt; token used to process arbitrary pre-shared key material.&lt;/p&gt;

&lt;p&gt;As an example of Noise flexibility, the custom protocol we detailed &lt;a href=&quot;#Ephemeral-and-Static-Public-Keys&quot;&gt;above&lt;/a&gt; can be shortly represented as &lt;em&gt;(Alice is on the left)&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-&amp;gt; e
&amp;lt;- e, ee, s
-&amp;gt; s, ss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where after each DH operation an encryption key is derived (along with the secrets computed by all previously executed DH operations) in order to encrypt/decrypt any subsequent sent/received message.&lt;/p&gt;

&lt;p&gt;Another example is given by the possibility to replicate within Noise the well established Signal’s &lt;a href=&quot;https://signal.org/docs/specifications/x3dh/&quot;&gt;X3DH&lt;/a&gt; key-agreement protocols, thus making the latter a general framework to design and study security of many practical and widespread DH-based key-exchange protocols.&lt;/p&gt;

&lt;h2 id=&quot;the-noise-state-objects&quot;&gt;The Noise State Objects&lt;/h2&gt;

&lt;p&gt;We mentioned multiple times that parties derive an encryption key each time they perform a DH operation, but how does this work in more details?&lt;/p&gt;

&lt;p&gt;Noise defines three &lt;em&gt;state object&lt;/em&gt;: a &lt;em&gt;Handshake State&lt;/em&gt;, a &lt;em&gt;Symmetric State&lt;/em&gt; and a &lt;em&gt;Cipher State&lt;/em&gt;, each encapsulated into each other and instantiated during the execution of a handshake.&lt;/p&gt;

&lt;p&gt;The Handshake State object stores the user’s and other party’s received ephemeral and static keys (if any) and embeds a Symmetric State object.&lt;/p&gt;

&lt;p&gt;The Symmetric State, instead, stores a handshake hash value &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;, iteratively updated with any message read/received and DH secret computed, and a chaining key &lt;code class=&quot;highlighter-rouge&quot;&gt;ck&lt;/code&gt;, updated using a key derivation function every time a DH secret is computed. This object further embeds a Cipher State.&lt;/p&gt;

&lt;p&gt;Lastly, the Cipher State stores a symmetric encryption &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; key and a counter &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;  used to encrypt and decrypt messages exchanged during the handshake (not only static keys, but also arbitrary payloads). These key and counter are refreshed every time the chaining key is updated.&lt;/p&gt;

&lt;p&gt;While processing each handshake’s message pattern token, all these objects are updated according to some specific &lt;em&gt;processing rules&lt;/em&gt; which employ a combination of public-key primitives, hash and key-derivation functions and symmetric ciphers. It is important to note, however, that at the end of each processed message pattern, the two users will share the same Symmetric and Cipher State embedded in their respective Handshake States.&lt;/p&gt;

&lt;p&gt;Once a handshake is complete, users derive two new Cipher States and can then discard the Handshake State object (and, thus, the embedded Symmetric State and Cipher State objects) 
employed during the handshake.&lt;/p&gt;

&lt;p&gt;These two Cipher states are used to encrypt and decrypt all outbound and inbound after-handshake messages, respectively, and only to these will be granted the confidentiality, authenticity, integrity and identity-hiding properties we detailed above.&lt;/p&gt;

&lt;p&gt;For more details on processing rules, we refer to &lt;a href=&quot;http://www.noiseprotocol.org/noise.html&quot;&gt;Noise specifications&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;supported-noise-handshakes-in-waku&quot;&gt;Supported Noise Handshakes in Waku&lt;/h1&gt;

&lt;p&gt;The Noise handshakes we provided support to in Waku address four typical scenarios occurring when an encrypted communication channel between Alice and Bob is going to be created:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alice and Bob know each others’ static key.&lt;/li&gt;
  &lt;li&gt;Alice knows Bob’s static key;&lt;/li&gt;
  &lt;li&gt;Alice and Bob share no key material and they don’t know each others’ static key.&lt;/li&gt;
  &lt;li&gt;Alice and Bob share some key material, but they don’t know each others’ static key.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The possibility to have handshakes based on the reciprocal knowledge parties have of each other, allows designing Noise handshakes that can quickly reach the desired level of security on exchanged encrypted messages while keeping the number of interactions between Alice and Bob minimum.&lt;/p&gt;

&lt;p&gt;Nonetheless, due to the pure &lt;em&gt;token-based&lt;/em&gt; nature of handshake processing rules, implementations can easily add support to any custom handshake pattern with minor modifications, in case more specific application use-cases need to be addressed.&lt;/p&gt;

&lt;p&gt;On a side note, we already mentioned that identity-hiding properties can be guaranteed against a passive attacker that only reads the communication occurring between Alice and Bob. However, an active attacker who compromised one party’s static key and actively interferes with the parties’ exchanged messages, may lower the identity-hiding security guarantees provided by some handshake patterns. In our security model we exclude such adversary, but, for completeness, in the following we report a summary of possible de-anonymization attacks that can be performed by such an active attacker.&lt;/p&gt;

&lt;p&gt;For more details on supported handshakes and on how these are implemented in Waku, we refer to &lt;a href=&quot;https://rfc.vac.dev/spec/35/&quot;&gt;35/WAKU2-NOISE&lt;/a&gt; RFC.&lt;/p&gt;

&lt;h3 id=&quot;the-k1k1-handshake&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;K1K1&lt;/code&gt; Handshake&lt;/h3&gt;

&lt;p&gt;If Alice and Bob know each others’ static key (e.g., these are public or were already exchanged in a previous handshake) , they MAY execute a &lt;code class=&quot;highlighter-rouge&quot;&gt;K1K1&lt;/code&gt; handshake.  In Noise notation &lt;em&gt;(Alice is on the left)&lt;/em&gt; this can be sketched as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; K1K1:
    -&amp;gt;  s
    &amp;lt;-  s
       ...
    -&amp;gt;  e
    &amp;lt;-  e, ee, es
    -&amp;gt;  se
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We note that here only ephemeral keys are exchanged. This handshake is useful in case Alice needs to instantiate a new separate encrypted communication channel with Bob, e.g. opening multiple parallel connections, file transfers, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security considerations on identity-hiding (active attacker)&lt;/strong&gt;: no static key is transmitted, but an active attacker impersonating Alice can check candidates for Bob’s static key.&lt;/p&gt;

&lt;h3 id=&quot;the-xk1-handshake&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;XK1&lt;/code&gt; Handshake&lt;/h3&gt;

&lt;p&gt;Here, Alice knows how to initiate a communication with Bob and she knows his public static key: such discovery can be achieved, for example, through a publicly accessible register of users’ static keys, smart contracts, or through a previous public/private advertisement of Bob’s static key.&lt;/p&gt;

&lt;p&gt;A Noise handshake pattern that suits this scenario is &lt;code class=&quot;highlighter-rouge&quot;&gt;XK1&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; XK1:
    &amp;lt;-  s
       ...
    -&amp;gt;  e
    &amp;lt;-  e, ee, es
    -&amp;gt;  s, se
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Within this handshake, Alice and Bob reciprocally authenticate their static keys &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; using ephemeral keys &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;. We note that while Bob’s static key is assumed to be known to Alice (and hence is not transmitted), Alice’s static key is sent to Bob encrypted with a key derived from both parties ephemeral keys and Bob’s static key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security considerations on identity-hiding (active attacker)&lt;/strong&gt;: Alice’s static key is encrypted with forward secrecy to an authenticated party. An active attacker initiating the handshake can check candidates for Bob’s static key against recorded/accepted exchanged handshake messages.&lt;/p&gt;

&lt;h3 id=&quot;the-xx-and-xxpsk0-handshakes&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;XX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;XXpsk0&lt;/code&gt; Handshakes&lt;/h3&gt;

&lt;p&gt;If Alice is not aware of any static key belonging to Bob (and neither Bob knows anything about Alice), she can execute an &lt;code class=&quot;highlighter-rouge&quot;&gt;XX&lt;/code&gt; handshake, where each party tran&lt;strong&gt;X&lt;/strong&gt;mits to the other its own static key.&lt;/p&gt;

&lt;p&gt;The handshake goes as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; XX:
    -&amp;gt;  e
    &amp;lt;-  e, ee, s, es
    -&amp;gt;  s, se
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We note that the main difference with &lt;code class=&quot;highlighter-rouge&quot;&gt;XK1&lt;/code&gt; is that in second step Bob sends to Alice his own static key encrypted with a key obtained from an ephemeral-ephemeral Diffie-Hellman exchange.&lt;/p&gt;

&lt;p&gt;This handshake can be slightly changed in case both Alice and Bob pre-shares some secret &lt;code class=&quot;highlighter-rouge&quot;&gt;psk&lt;/code&gt; which can be used to strengthen their mutual authentication during the handshake execution. One of the resulting protocol, called &lt;code class=&quot;highlighter-rouge&quot;&gt;XXpsk0&lt;/code&gt;, goes as follow:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; XXpsk0:
    -&amp;gt;  psk, e
    &amp;lt;-  e, ee, s, es
    -&amp;gt;  s, se
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The main difference with &lt;code class=&quot;highlighter-rouge&quot;&gt;XX&lt;/code&gt; is that Alice’s and Bob’s static keys, when transmitted, would be encrypted with a key derived from &lt;code class=&quot;highlighter-rouge&quot;&gt;psk&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security considerations on identity-hiding (active attacker)&lt;/strong&gt;: Alice’s static key is encrypted with forward secrecy to an authenticated party for both &lt;code class=&quot;highlighter-rouge&quot;&gt;XX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;XXpsk0&lt;/code&gt; handshakes. In &lt;code class=&quot;highlighter-rouge&quot;&gt;XX&lt;/code&gt;, Bob’s static key is encrypted with forward secrecy but is transmitted to a non-authenticated user which can then be an active attacker. In &lt;code class=&quot;highlighter-rouge&quot;&gt;XXpsk0&lt;/code&gt;, instead, Bob’s secret key is protected by forward secrecy to a partially authenticated party (through the pre-shared secret &lt;code class=&quot;highlighter-rouge&quot;&gt;psk&lt;/code&gt; but not through any static key), provided that &lt;code class=&quot;highlighter-rouge&quot;&gt;psk&lt;/code&gt; was not previously compromised (in such case identity-hiding properties provided by the &lt;code class=&quot;highlighter-rouge&quot;&gt;XX&lt;/code&gt; handshake applies).&lt;/p&gt;

&lt;h1 id=&quot;session-management-and-multi-device-support&quot;&gt;Session Management and Multi-Device Support&lt;/h1&gt;

&lt;p&gt;When two users complete a Noise handshake, an encryption/decryption session - or &lt;em&gt;Noise session&lt;/em&gt; - consisting of two Cipher States is instantiated.&lt;/p&gt;

&lt;p&gt;By identifying Noise session with a &lt;code class=&quot;highlighter-rouge&quot;&gt;session-id&lt;/code&gt; derived from the handshake’s cryptographic material, we can take advantage of the &lt;a href=&quot;https://github.com/libp2p/specs/tree/master/pubsub&quot;&gt;PubSub/GossipSub&lt;/a&gt; protocols used by Waku for relaying messages in order to manage instantiated Noise sessions.&lt;/p&gt;

&lt;p&gt;The core idea is to exchange after-handshake messages  (encrypted with a Cipher State specific to the Noise session), over a content topic derived from the (secret) &lt;code class=&quot;highlighter-rouge&quot;&gt;session-id&lt;/code&gt; the corresponding session refers to.&lt;/p&gt;

&lt;p&gt;This allows to decouple the handshaking phase from the actual encrypted communication, thus improving users’ identity-hiding capabilities.&lt;/p&gt;

&lt;p&gt;Furthermore, by publicly revealing a value derived from &lt;code class=&quot;highlighter-rouge&quot;&gt;session-id&lt;/code&gt; on the corresponding session content topic, a Noise session can be marked as &lt;em&gt;stale&lt;/em&gt;, enabling peers to save resources by discarding any eventually &lt;a href=&quot;https://rfc.vac.dev/spec/13/&quot;&gt;stored&lt;/a&gt; message sent to such content topic.&lt;/p&gt;

&lt;p&gt;One relevant aspect in today’s applications is the possibility for users to employ different devices in their communications. In some cases, this is non-trivial to achieve since, for example, encrypted messages might be required to be synced on different devices which do not necessarily share the necessary key material for  decryption and may be temporarily offline.&lt;/p&gt;

&lt;p&gt;We address this by requiring each user’s device to instantiate multiple Noise sessions either with all user’s other devices which, in turn, all together share a Noise session with the other party, or by directly instantiating a Noise session with all other party’s devices.&lt;/p&gt;

&lt;p&gt;We named these two approaches $N11M$ and $NM$, respectively, which are in turn loosely based on the paper &lt;a href=&quot;https://eprint.iacr.org/2019/1363.pdf&quot;&gt;“Multi-Device for Signal”&lt;/a&gt; and &lt;a href=&quot;https://signal.org/docs/specifications/sesame/&quot;&gt;Signal’s Sesame Algorithm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/noise/N11M.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Informally, in the $N11M$ session management scheme, once the first Noise session between any of Alice’s and Bob’s device is instantiated, its session information is securely propagated to all other devices using previously instantiated Noise sessions. Hence, all devices are able to send and receive new messages on the content topic associated to such session.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/noise/NM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the $NM$ session management scheme, instead, all pairs of Alice’s and Bob’s devices have a distinct Noise session: a message is then sent from the currently-in-use sender’s device to all recipient’s devices, by properly encrypting and sending it to the content topics of each corresponding Noise session. If sent messages should be available on all sender’s devices as well, we require each pair of sender’s devices to instantiate a Noise session used for syncing purposes.&lt;/p&gt;

&lt;p&gt;For more technical details on how Noise sessions are instantiated and managed within these two mechanisms and the different trade-offs provided by the latter, we refer to &lt;a href=&quot;https://rfc.vac.dev/spec/37/&quot;&gt;37/WAKU2-NOISE-SESSIONS&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;In this post we provided an overview of Noise, a protocol framework for designing Diffie-Hellman based key-exchange mechanisms allowing systematic security and threat model analysis.&lt;/p&gt;

&lt;p&gt;The flexibility provided by Noise components allows not only to fully replicate with same security guarantees well established key-exchange primitives such as X3DH, currently employed by Status &lt;a href=&quot;https://specs.status.im/spec/5&quot;&gt;5/TRANSPORT-SECURITY&lt;/a&gt;, but enables also optimizations based on the reciprocal knowledge parties have of each other while allowing easier protocols’ security analysis and (formal) verification.&lt;/p&gt;

&lt;p&gt;Furthermore, different handshakes can be combined and executed one after each other, a particularly useful feature to authenticate multiple static keys employed by different applications but also to ease keys revocation.&lt;/p&gt;

&lt;p&gt;The possibility to manage Noise sessions over multiple devices and the fact that handshakes can be concretely instantiated using modern, fast and secure cryptographic primitives such as &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7539&quot;&gt;ChaChaPoly&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7693&quot;&gt;BLAKE2b&lt;/a&gt;, make Noise one of the best candidates for efficiently and securely address the many different needs of applications built on top of Waku requiring key-agreement.&lt;/p&gt;

&lt;h2 id=&quot;future-steps&quot;&gt;Future steps&lt;/h2&gt;

&lt;p&gt;The available &lt;a href=&quot;https://github.com/status-im/nwaku/tree/master/waku/v2/protocol/waku_noise&quot;&gt;implementation&lt;/a&gt; of Noise in &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt;, although mostly complete, is still in its testing phase. As future steps we would like to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;have an extensively tested and robust Noise implementation;&lt;/li&gt;
  &lt;li&gt;formalize, implement and test performances of the two proposed $N11M$ and $NM$ session management mechanisms and their suitability for common use-case scenarios;&lt;/li&gt;
  &lt;li&gt;provide Waku network nodes a native protocol to readily support key-exchanges, strongly-encrypted communication and multi-device session management mechanisms with none-to-little interaction besides applications’ connection requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/6/&quot;&gt;6/WAKU1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/10/&quot;&gt;10/WAKU2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/13/&quot;&gt;13/WAKU2-STORE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/26/&quot;&gt;26/WAKU-PAYLOAD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/35/&quot;&gt;35/WAKU2-NOISE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/37/&quot;&gt;37/WAKU2-NOISE-SESSIONS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://specs.status.im/spec/5&quot;&gt;5/TRANSPORT-SECURITY&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/libp2p/specs/tree/master/pubsub&quot;&gt;The PubSub/GossipSub Protocols&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.noiseprotocol.org/noise.html&quot;&gt;The Noise Protocol Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://signal.org/docs/specifications/x3dh/&quot;&gt;The X3DH Key-agreement Protocol&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eprint.iacr.org/2019/1363.pdf&quot;&gt;“Multi-Device for Signal”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://signal.org/docs/specifications/sesame/&quot;&gt;Signal’s Sesame Algorithm&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Public-key_cryptography&quot;&gt;Public-key cryptography&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Elliptic_curve&quot;&gt;Elliptic curves&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication&quot;&gt;Elliptic Curve point multiplication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Symmetric-key_algorithm&quot;&gt;Symmetric key algorithm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Authenticated_encryption&quot;&gt;Authenticated encryption&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange&quot;&gt;Diffie-Hellman Key-Exchange&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_logarithm&quot;&gt;The Discrete Logarithm Problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Computational_Diffie%E2%80%93Hellman_assumption&quot;&gt;Computational Diffie-Hellman Assumption&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme&quot;&gt;The ECIES Encryption Algorithm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm&quot;&gt;The ECDSA Signature Algorithm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Galois/Counter_Mode&quot;&gt;The Galois Counter Mode mode of operation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7539&quot;&gt;The ChaChaPoly AEAD Cipher&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7693&quot;&gt;The BLAKE2b Hash Function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SHA-3&quot;&gt;The SHA-3 Hash Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>s1fr0</name></author><category term="research" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vac.dev/assets/img/noise/NM.png" /><media:content medium="image" url="https://vac.dev/assets/img/noise/NM.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Waku v2 Ambient Peer Discovery</title><link href="https://vac.dev/wakuv2-apd" rel="alternate" type="text/html" title="Waku v2 Ambient Peer Discovery" /><published>2022-05-09T08:00:00+00:00</published><updated>2022-05-09T08:00:00+00:00</updated><id>https://vac.dev/ambient-peer-discovery</id><content type="html" xml:base="https://vac.dev/wakuv2-apd">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_CHTML&quot;&gt;
&lt;/script&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [['$','$'], ['\\(','\\)']],
      processEscapes: true},
      jax: [&quot;input/TeX&quot;,&quot;input/MathML&quot;,&quot;input/AsciiMath&quot;,&quot;output/CommonHTML&quot;],
      extensions: [&quot;tex2jax.js&quot;,&quot;mml2jax.js&quot;,&quot;asciimath2jax.js&quot;,&quot;MathMenu.js&quot;,&quot;MathZoom.js&quot;,&quot;AssistiveMML.js&quot;, &quot;[Contrib]/a11y/accessibility-menu.js&quot;],
      TeX: {
      extensions: [&quot;AMSmath.js&quot;,&quot;AMSsymbols.js&quot;,&quot;noErrors.js&quot;,&quot;noUndefined.js&quot;],
      equationNumbers: {
      autoNumber: &quot;AMS&quot;
      }
    }
  });
&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/10/&quot;&gt;Waku v2&lt;/a&gt; comprises a set of modular protocols for secure, privacy preserving communication.
Avoiding centralization, these protocols exchange messages over a P2P network layer.
In order to build a P2P network, participating nodes first have to discover peers within this network.
This is where &lt;a href=&quot;https://docs.libp2p.io/concepts/publish-subscribe/#discovery&quot;&gt;&lt;em&gt;ambient peer discovery&lt;/em&gt;&lt;/a&gt; comes into play:
it allows nodes to find peers, making it an integral part of any decentralized application.&lt;/p&gt;

&lt;p&gt;In this post the term &lt;em&gt;node&lt;/em&gt; to refers to &lt;em&gt;our&lt;/em&gt; endpoint or the endpoint that takes action,
while the term &lt;em&gt;peer&lt;/em&gt; refers to other endpoints in the P2P network.
These endpoints can be any device connected to the Internet: e.g. servers, PCs, notebooks, mobile devices, or applications like a browser.
As such, nodes and peers are the same. We use these terms for the ease of explanation without loss of generality.&lt;/p&gt;

&lt;p&gt;In Waku’s modular design, ambient peer discovery is an umbrella term for mechanisms that allow nodes to find peers.
Various ambient peer discovery mechanisms are supported, and each is specified as a separate protocol.
Where do these protocols fit into Waku’s protocol stack?
The P2P layer of Waku v2 builds on &lt;a href=&quot;https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/README.md&quot;&gt;libp2p gossipsub&lt;/a&gt;.
Nodes participating in a gossipsub protocol manage a mesh network that is used for routing messages.
This mesh network is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Peer-to-peer#Unstructured_networks&quot;&gt;unstructured P2P network&lt;/a&gt;
offering high robustness and resilience against attacks.
Gossipsub implements many improvements overcoming the shortcomings typically associated with unstructured P2P networks, e.g. inefficient flooding based routing.
The gossipsub mesh network is managed in a decentralized way, which requires each node to know other participating peers.
Waku v2 may use any combination of its ambient discovery protocols to find appropriate peers.&lt;/p&gt;

&lt;p&gt;Summarizing, Waku v2 comprises a &lt;em&gt;peer management layer&lt;/em&gt; based on libp2p gossipsub,
which manages the peers of nodes, and an &lt;em&gt;ambient peer discovery layer&lt;/em&gt;,
which provides information about peers to the peer management layer.&lt;/p&gt;

&lt;p&gt;We focus on ambient peer discovery methods that are in line with our goal of building a fully decentralized, generalized, privacy-preserving and censorship-resistant messaging protocol.
Some of these protocols still need adjustments to adhere to our privacy and anonymity requirements. For now, we focus on operational stability and feasibility.
However, when choosing techniques, we pay attention to selecting mechanisms that can feasibly be tweaked for privacy in future research efforts.
Because of the modular design and the fact that Waku v2 has several discovery methods at its disposal, we could even remove a protocol in case future evaluation deems it not fitting our standards.&lt;/p&gt;

&lt;p&gt;This post covers the current state and future considerations of ambient peer discovery for Waku v2,
and gives reason for changes and modifications we made or plan to make.
The ambient peer discovery protocols currently supported by Waku v2 are a modified version of Ethereum’s &lt;a href=&quot;https://github.com/ethereum/devp2p/blob/6b0abc3d956a626c28dce1307ee9f546db17b6bd/discv5/discv5.md&quot;&gt;Discovery v5&lt;/a&gt;
and &lt;a href=&quot;https://vac.dev/dns-based-discovery&quot;&gt;DNS-based discovery&lt;/a&gt;.
Waku v2 further supports &lt;a href=&quot;https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.1.md#prune-backoff-and-peer-exchange&quot;&gt;gossipsub’s peer exchange protocol&lt;/a&gt;.
In addition, we plan to introduce protocols for general peer exchange and capability discovery, respectively.
The former allows resource restricted nodes to outsource querying for peers to stronger peers,
the latter allows querying peers for their supported capabilities.
Besides these new protocols, we are working on integrating capability discovery in our existing ambient peer discovery protocols.&lt;/p&gt;

&lt;h2 id=&quot;static-node-lists&quot;&gt;Static Node Lists&lt;/h2&gt;

&lt;p&gt;The simplest method of learning about peers in a P2P network is via static node lists.
These can be given to nodes as start-up parameters or listed in a config-file.
They can also be provided in a script-parseable format, e.g. in JSON.
While this method of providing bootstrap nodes is very easy to implement, it requires static peers, which introduce centralized elements.
Also, updating static peer information introduces significant administrative overhead:
code and/or config files have to be updated and released.
Typically, static node lists only hold a small number of bootstrap nodes, which may lead to high load on these nodes.&lt;/p&gt;

&lt;h2 id=&quot;dns-based-discovery&quot;&gt;DNS-based Discovery&lt;/h2&gt;

&lt;p&gt;Compared to static node lists,
&lt;a href=&quot;https://vac.dev/dns-based-discovery&quot;&gt;DNS-based discovery&lt;/a&gt; (specified in &lt;a href=&quot;https://eips.ethereum.org/EIPS/eip-1459&quot;&gt;EIP-1459&lt;/a&gt;)
provides a more dynamic way of discovering bootstrap nodes.
It is very efficient, can easily be handled by resource restricted devices and provides very good availability.
In addition to a naive DNS approach, Ethereum’s DNS-based discovery introduces efficient authentication leveraging &lt;a href=&quot;https://en.wikipedia.org/wiki/Merkle_tree&quot;&gt;Merkle trees&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A further advantage over static node lists is the separation of code/release management and bootstrap node management.
However, changing and updating the list of bootstrap nodes still requires administrative privileges because DNS records have to be added or updated.&lt;/p&gt;

&lt;p&gt;While this method of discovery still requires centralized elements,
node list management can be delegated to various DNS zones managed by other entities mitigating centralization.&lt;/p&gt;

&lt;h2 id=&quot;discovery-v5&quot;&gt;Discovery V5&lt;/h2&gt;

&lt;p&gt;A much more dynamic method of ambient peer discovery is &lt;a href=&quot;https://github.com/ethereum/devp2p/blob/6b0abc3d956a626c28dce1307ee9f546db17b6bd/discv5/discv5.md&quot;&gt;Discovery v5&lt;/a&gt;, which is Ethereum’s peer discovery protocol.
It is based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Kademlia&quot;&gt;Kademlia&lt;/a&gt; distributed hashtable (DHT).
An &lt;a href=&quot;https://vac.dev/kademlia-to-discv5&quot;&gt;introduction to discv5 and its history&lt;/a&gt;, and a &lt;a href=&quot;https://vac.dev/feasibility-discv5&quot;&gt;discv5 Waku v2 feasibility study&lt;/a&gt;
can be found in previous posts on this research log.&lt;/p&gt;

&lt;p&gt;We use Discovery v5 as an ambient peer discovery method for Waku v2 because it is decentralized, efficient, actively researched, and has web3 as its main application area.
Discv5 also offers mitigation techniques for various attacks, which we cover later in this post.&lt;/p&gt;

&lt;p&gt;Using a DHT (structured P2P network) as a means for ambient peer discovery, while using the gossipsub mesh network (unstructured P2P network) for transmitting actual messages,
Waku v2 leverages advantages from both worlds.
One of the main benefits of DHTs is offering a global view over participating nodes. 
This, in turn, allows sampling random sets of nodes which is important for equally distributing load.
Gossipsub, on the other hand, offers great robustness and resilience against attacks.
Even if discv5 discovery should not work in advent of a DoS attack, Waku v2 can still operate switching to different discovery methods.&lt;/p&gt;

&lt;p&gt;Discovery methods that use separate P2P networks still depend on bootstrapping,
which Waku v2 does via parameters on start-up or via DNS-based discovery.
This might raise the question of why such discovery methods are beneficial.
The answer lies in the aforementioned global view of DHTs. Without discv5 and similar methods, the bootstrap nodes are used as part of the gossipsub mesh.
This might put heavy load on these nodes and further, might open pathways to inference attacks.
Discv5, on the other hand, uses the bootstrap nodes merely as an entry to the discovery network and can provide random sets of nodes (sampled from a global view)
for bootstrapping or expanding the mesh.&lt;/p&gt;

&lt;h3 id=&quot;dht-background&quot;&gt;DHT Background&lt;/h3&gt;

&lt;p&gt;Distributed Hash Tables are a class of structured P2P overlay networks.
A DHT can be seen as a distributed node set of which each node is responsible for a part of the hash space.
In contrast to unstructured P2P networks, e.g. the mesh network maintained by gossipsub,
DHTs have a global view over the node set and the hash space (assuming the participating nodes behave well).&lt;/p&gt;

&lt;p&gt;DHTs are susceptible to various kinds of attacks, especially &lt;a href=&quot;https://en.wikipedia.org/wiki/Sybil_attack&quot;&gt;Sybil attacks&lt;/a&gt;
and &lt;a href=&quot;https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/heilman&quot;&gt;eclipse attacks&lt;/a&gt;.
While security aspects have been addressed in various research papers, general practical solutions are not available.
However, discv5 introduced various practical mitigation techniques.&lt;/p&gt;

&lt;h3 id=&quot;random-walk-discovery&quot;&gt;Random Walk Discovery&lt;/h3&gt;

&lt;p&gt;While discv5 is based on the Kademlia DHT, it only uses the &lt;em&gt;distributed node set&lt;/em&gt; aspect of DHTs.
It does not map values (items) into the distributed hash space.
This makes sense, because the main purpose of discv5 is discovering other nodes that support discv5, which are expected to be Ethereum nodes.
Ethereum nodes that want to discover other Ethereum nodes simply query the discv5 network for a random set of peers.
If Waku v2 would do the same, only a small subset of the retrieved nodes would support Waku v2.&lt;/p&gt;

&lt;p&gt;A first naive solution for Waku v2 discv5 discovery is&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;retrieve a random node set, which is achieved by querying for a set of randomly chosen node IDs&lt;/li&gt;
  &lt;li&gt;filter the returned nodes on the query path based on Waku v2 capability via the &lt;a href=&quot;https://rfc.vac.dev/spec/31/&quot;&gt;Waku v2 ENR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;repeat until enough Waku v2 capable nodes are found&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This query process boils down to random walk discovery, which is very resilient against attacks, but also very inefficient if the number of nodes supporting the desired capability is small.
We refer to this as the needle-in-the-haystack problem.&lt;/p&gt;

&lt;h3 id=&quot;random-walk-performance-estimation&quot;&gt;Random Walk Performance Estimation&lt;/h3&gt;

&lt;p&gt;This subsection provides a rough estimation of the overhead introduced by random walk discovery.&lt;/p&gt;

&lt;p&gt;Given the following parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$n$ number of total nodes participating in discv5&lt;/li&gt;
  &lt;li&gt;$p$ percentage of nodes supporting Waku&lt;/li&gt;
  &lt;li&gt;$W$ the event of having at least one Waku node in a random sample&lt;/li&gt;
  &lt;li&gt;$k$ the size of a random sample (default = 16)&lt;/li&gt;
  &lt;li&gt;$\alpha$ the number of parallel queries started&lt;/li&gt;
  &lt;li&gt;$b$ bits per hop&lt;/li&gt;
  &lt;li&gt;$q$ the number of queries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A query takes $log_{2^b}n$ hops to retrieve a random sample of nodes.&lt;/p&gt;

&lt;p&gt;$P(W) = 1 - (1-p/100)^k$ is the probability of having at least one Waku node in the sample.&lt;/p&gt;

&lt;p&gt;$P(W^q) = 1 - (1-p/100)^{kq}$  is the probability of having at least one Waku node in the union of $q$ samples.&lt;/p&gt;

&lt;p&gt;Expressing this in terms of $q$, we can write:
\(P(W^q) = 1 - (1-p/100)^{kq} \iff  q = log_{(1-p/100)^k}(1-P(W^q))\)&lt;/p&gt;

&lt;p&gt;Figure 1 shows a log-log plot for $P(W^q) = 90\%$.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;../assets/img/waku_v2_discv5_random_walk_estimation.svg&quot; width=&quot;75%&quot; /&gt;
    &lt;br /&gt;
    Figure 1: log-log plot showing the number of queries necessary to retrieve a Waku v2 node with a probability of 90% in relation to the Waku v2 node concentration in the network.
&lt;/p&gt;

&lt;p&gt;Assuming $p=0.1$, we would need&lt;/p&gt;

\[0.9 = 1 - (1-0.1/100)^{16q} =&amp;gt; q \approx 144\]

&lt;p&gt;queries to get a Waku node with 90% probability, which leads to $\approx 144 * 18 = 2592$ overlay hops.
Choosing $b=3$ would reduce the number to $\approx 144 * 6 = 864$.
Even when choosing $\alpha = 10$ we would have to wait at least 80 RTTs.
This effort is just for retrieving a single Waku node. Ideally, we want at least 3 Waku nodes for bootstrapping a Waku relay.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ethereum/devp2p/blob/6b0abc3d956a626c28dce1307ee9f546db17b6bd/discv5/discv5-theory.md#ad-placement-and-topic-radius&quot;&gt;The discv5 doc&lt;/a&gt; roughly estimates $p=1%$ to be the threshold for acceptably efficient random walk discovery. 
This is in line with our estimation:&lt;/p&gt;

\[0.9 = 1 - (1-1/100)^{16q} =&amp;gt; q \approx 14\]

&lt;p&gt;The number of necessary queries is linearly dependent on the percentage $p$ of Waku nodes.
The number of hops per query is logarithmically dependent on $n$.
Thus, random walk searching is inefficient for small percentages $p$.
Still, random walks are more resilient against attacks.&lt;/p&gt;

&lt;p&gt;We can conclude that a Waku node concentration below 1% renders vanilla discv5 unfit for our needs.
Our current solution and future plans for solving this issue are covered in the next subsections.&lt;/p&gt;

&lt;h3 id=&quot;simple-solution-separate-discovery-network&quot;&gt;Simple Solution: Separate Discovery Network&lt;/h3&gt;

&lt;p&gt;The simple solution we currently use for &lt;a href=&quot;https://rfc.vac.dev/spec/33/&quot;&gt;Waku v2 discv5&lt;/a&gt; is a separate discv5 network.
All (well behaving) nodes in this network support Waku v2, resulting in a very high query efficiency.
However, this solution reduces resilience because the difficulty of attacking a DHT scales with the number of participating nodes.&lt;/p&gt;

&lt;h3 id=&quot;discv5-topic-discovery&quot;&gt;Discv5 Topic Discovery&lt;/h3&gt;

&lt;p&gt;We did not base our solution on the &lt;a href=&quot;https://github.com/ethereum/devp2p/blob/master/discv5/discv5-theory.md#topic-advertisement&quot;&gt;current version of discv5 topic discovery&lt;/a&gt;,
because, similar to random walk discovery, it suffers from poor performance for relatively rare capabilities/topics.&lt;/p&gt;

&lt;p&gt;However, there is &lt;a href=&quot;https://github.com/harnen/service-discovery-paper&quot;&gt;ongoing research&lt;/a&gt; in discv5 topic discovery which is close to ideas we explored when pondering efficient and resilient Waku discv5 solutions.
We keep a close eye on this research, give feedback, and make suggestions, as we plan to switch to this version of topic discovery in the future.&lt;/p&gt;

&lt;p&gt;In a nutshell, topic discovery will manage separate routing tables for each topic.
These topic specific tables are initialized with nodes from the discv5 routing table.
While the buckets of the discv5 routing table represent distance intervals from the node’s &lt;code class=&quot;highlighter-rouge&quot;&gt;node ID&lt;/code&gt;, the topic table buckets represent distance intervals from &lt;code class=&quot;highlighter-rouge&quot;&gt;topic ID&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Nodes that want to register a topic try to register that topic at one random peer per bucket.
This leads to registering the topic at peers in closer and closer neighbourhoods around the topic ID, which
yields a very efficient and resilient compromise between random walk discovery and DHT discovery.
Peers in larger neighbourhoods around the topic ID are less efficient to discover, however more resilient against eclipse attacks and vice versa.&lt;/p&gt;

&lt;p&gt;Further, this works well with the overload and DoS protection discv5 employs.
Discv5 limits the amount of nodes registered per topic on a single peer. Further, discv5 enforces a waiting time before nodes can register topics at peers.
So, for popular topics, a node might fail to register the topic in a close neighbourhood.
However, because the topic is popular (has a high occurrence percentage $p$), it can still be efficiently discovered.&lt;/p&gt;

&lt;p&gt;In the future, we also plan to integrate Waku v2 capability discovery, which will not only allow asking for nodes that support Waku v2,
but asking for Waku v2 nodes supporting specific Waku v2 protocols like filter or store.
For the store protocol we envision sub-capabilities reflecting message topics and time frames of messages.
We will also investigate related security implications.&lt;/p&gt;

&lt;h3 id=&quot;attacks-on-dhts&quot;&gt;Attacks on DHTs&lt;/h3&gt;

&lt;p&gt;In this post, we only briefly describe common attacks on DHTs.
These attacks are mainly used for denial of service (DoS),
but can also used as parts of more sophisticated attacks, e.g. deanonymization attacks.
A future post on this research log will cover security aspects of ambient peer discovery with a focus on privacy and anonymity.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sybil Attack&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The power of an attacker in a DHT is proportional to the number of controlled nodes.
Controlling nodes comes at a high resource cost and/or requires controlling a botnet via a preliminary attack.&lt;/p&gt;

&lt;p&gt;In a Sybil attack, an attacker generates lots of virtual node identities.
This allows the attacker to control a large portion of the ID space in a DHT at a relatively low cost.
Sybil attacks are especially powerful when the attacker can freely choose the IDs of generated nodes,
because this allows positioning at chosen points in the DHT.&lt;/p&gt;

&lt;p&gt;Because Sybil attacks amplify the power of many attacks against DHTs,
making Sybil attacks as difficult as possible is the basis for resilient DHT operation.
The typical abstract mitigation approach is binding node identities to physical network interfaces.
To some extend, this can be achieved by introducing IP address based limits.
Further, generating node IDs can be bound by proof of work (PoW),
which, however, comes with a set of shortcomings, e.g. relatively high costs on resource restricted devices.
&lt;a href=&quot;https://github.com/ethereum/devp2p/blob/6b0abc3d956a626c28dce1307ee9f546db17b6bd/discv5/discv5-rationale.md#sybil-and-eclipse-attacks&quot;&gt;The discv5 doc&lt;/a&gt;
describes both Sybil and eclipse attacks, as well as concrete mitigation techniques employed by discv5.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Eclipse Attack&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In an eclipse attack, nodes controlled by the attacker poison the routing tables of other nodes in a way that parts of the DHT become eclipsed, i.e. invisible.
When a controlled node is asked for the next step in a path,
it provides another controlled node as the next step,
effectively navigating the querying node around or away from certain areas of the DHT.
While several mitigation techniques have been researched, there is no definitive protection against eclipse attacks available as of yet.
One mitigation technique is increasing $\alpha$, the number of parallel queries, and following each concurrent path independently for the lookup.&lt;/p&gt;

&lt;p&gt;The eclipse attack becomes very powerful in combination with a successful Sybil attack;
especially when the attacker can freely choose the position of the Sybil nodes.&lt;/p&gt;

&lt;p&gt;The aforementioned new topic discovery of discv5 provides a good balance between protection against eclipse attacks and query performance.&lt;/p&gt;

&lt;h2 id=&quot;peer-exchange-protocol&quot;&gt;Peer Exchange Protocol&lt;/h2&gt;

&lt;p&gt;While discv5 based ambient peer discovery has many desirable properties, resource restricted nodes and nodes behind restrictive NAT setups cannot run discv5 satisfactory.
With these nodes in mind, we started working on a simple &lt;em&gt;peer exchange protocol&lt;/em&gt; based on ideas proposed &lt;a href=&quot;https://github.com/libp2p/specs/issues/222&quot;&gt;here&lt;/a&gt;.
The peer exchange protocol will allow nodes to ask peers for additional peers.
Similar to discv5, the peer exchange protocol will also support capability discovery.&lt;/p&gt;

&lt;p&gt;The new peer exchange protocol can be seen as a simple replacement for the &lt;a href=&quot;https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/rendezvous/README.md&quot;&gt;Rendezvous protocol&lt;/a&gt;, which Waku v2 does not support.
While the rendezvous protocol involves nodes registering at rendezvous peers, the peer exchange protocol simply allows nodes to ask any peer for a list of peers (with a certain set of capabilities).
Rendezvous tends to introduce centralized elements as rendezvous peers have a super-peer role.&lt;/p&gt;

&lt;p&gt;In the future, we will investigate resource usage of &lt;a href=&quot;https://rfc.vac.dev/spec/33/&quot;&gt;Waku v2 discv5&lt;/a&gt; and provide suggestions for minimal resources nodes should have to run discv5 satisfactory.&lt;/p&gt;

&lt;h2 id=&quot;further-protocols-related-to-discovery&quot;&gt;Further Protocols Related to Discovery&lt;/h2&gt;

&lt;p&gt;Waku v2 comprises further protocols related to ambient peer discovery. We shortly mention them for context, even though they are not strictly ambient peer discovery protocols.&lt;/p&gt;

&lt;h3 id=&quot;gossipsub-peer-exchange-protocol&quot;&gt;Gossipsub Peer Exchange Protocol&lt;/h3&gt;

&lt;p&gt;Gossipsub provides an integrated &lt;a href=&quot;https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.1.md#prune-backoff-and-peer-exchange&quot;&gt;peer exchange&lt;/a&gt; mechanism which is also supported by Waku v2.
Gossipsub peer exchange works in a &lt;em&gt;push&lt;/em&gt; manner. Nodes send peer lists to peers they prune from the active mesh.
This pruning is part of the gossipsub peer management, blurring the boundaries of &lt;em&gt;peer management&lt;/em&gt; and &lt;em&gt;ambient peer discovery&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We will investigate anonymity implications of this protocol and might disable it in favour of more anonymity-preserving protocols.
Sending a list of peers discloses information about the sending node.
We consider restricting these peer lists to cached peers that are currently not used in the active gossipsub mesh.&lt;/p&gt;

&lt;h3 id=&quot;capability-negotiation&quot;&gt;Capability Negotiation&lt;/h3&gt;

&lt;p&gt;Some of the ambient peer discovery methods used by Waku2 will support capability discovery.
This allows to narrow down the set of retrieved peers to peers that support specific capabilities.
This is efficient because it avoids establishing connections to nodes that we are not interested in.&lt;/p&gt;

&lt;p&gt;However, the ambient discovery interface does not require capability discovery, which will lead to nodes having peers with unknown capabilities in their peer lists.
We work on a &lt;em&gt;capability negotiation protocol&lt;/em&gt; which allows nodes to ask peers&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for their complete list of capabilities, and&lt;/li&gt;
  &lt;li&gt;whether they support a specific capability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will investigate security implications, especially when sending full capability lists.&lt;/p&gt;

&lt;h2 id=&quot;nat-traversal&quot;&gt;NAT traversal&lt;/h2&gt;

&lt;p&gt;For &lt;a href=&quot;https://docs.libp2p.io/concepts/nat/&quot;&gt;NAT traversal&lt;/a&gt;, Waku v2 currently supports the port mapping protocols &lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_Plug_and_Play&quot;&gt;UPnP&lt;/a&gt; and &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6886&quot;&gt;NAT-PMP&lt;/a&gt; / &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6887&quot;&gt;PCP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the future, we plan to add support for parts of &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8445&quot;&gt;ICE&lt;/a&gt;, e.g. &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7350&quot;&gt;STUN&lt;/a&gt;.
We do not plan to support &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5928&quot;&gt;TURN&lt;/a&gt; because TURN relays would introduce a centralized element.
A modified decentralized version of TURN featuring incentivization might be an option in the future;
strong peers could offer a relay service similar to TURN.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/ethereum/devp2p/issues/199&quot;&gt;plans to integrate more NAT traversal into discv5&lt;/a&gt;, in which we might participate.
So far, the only traversal technique supported by discv5 is nodes receiving their external IP address in pong messages.&lt;/p&gt;

&lt;p&gt;While NAT traversal is very important, adding more NAT traversal techniques is not a priority at the moment.
Nodes behind restrictive symmetric NAT setups cannot be discovered, but they can still discover peers in less restrictive setups.
While we wish to have as many nodes as possible to be discoverable via ambient peer discovery, two nodes behind a restrictive symmetric NAT can still exchange Waku v2 messages if they discovered a shared peer.
This is one of the nice resilience related properties of flooding based routing algorithms.&lt;/p&gt;

&lt;p&gt;For mobile nodes, which suffer from changing IP addresses and double NAT setups, we plan using the peer exchange protocol to ask peers for more peers.
Besides saving resources on resource restricted devices, this approach works as long as peers are in less restrictive environments.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-and-future-prospects&quot;&gt;Conclusion and Future Prospects&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Ambient peer discovery&lt;/em&gt; is an integral part of decentralized applications. It allows nodes to learn about peers in the network.
As of yet, Waku v2 supports DNS-based discovery and a slightly modified version of discv5.
We are working on further protocols, including a peer exchange protocol that allows resource restricted nodes to ask stronger peers for peer lists.
Further, we are working on adding capability discovery to our ambient discovery protocols, allowing nodes to find peers with desired properties.&lt;/p&gt;

&lt;p&gt;These protocols can be combined in a modular way and allow Waku v2 nodes to build a strong and resilient mesh network,
even if some discovery methods are not available in a given situation.&lt;/p&gt;

&lt;p&gt;We will investigate security properties of these discovery mechanisms with a focus on privacy and anonymity in a future post on this research log.
As an outlook we can already state that DHT approaches typically allow inferring information about the querying node.
Further, sending peer lists allows inferring the position of a node within the mesh, and by extension information about the node.
Waku v2 already provides some mitigation, because the mesh for transmitting actual messages, and the peer discovery network are separate.
To mitigate information leakage by transmitting peer lists, we plan to only reply with lists of peers that nodes do not use in their active meshes.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/10/&quot;&gt;Waku v2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/README.md&quot;&gt;libp2p gossipsub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Peer-to-peer#Unstructured_networks&quot;&gt;unstructured P2P network&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.libp2p.io/concepts/publish-subscribe/#discovery&quot;&gt;ambient peer discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ethereum/devp2p/blob/6b0abc3d956a626c28dce1307ee9f546db17b6bd/discv5/discv5.md&quot;&gt;Discovery v5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kademlia&quot;&gt;Kademlia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vac.dev/kademlia-to-discv5&quot;&gt;Discv5 history&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vac.dev/feasibility-discv5&quot;&gt;Discv5 Waku v2 feasibility study&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vac.dev/dns-based-discovery&quot;&gt;DNS-based discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eips.ethereum.org/EIPS/eip-1459&quot;&gt;EIP-1459&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Merkle_tree&quot;&gt;Merkle trees&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sybil_attack&quot;&gt;Sybil attack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/heilman&quot;&gt;eclipse attack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/31/&quot;&gt;Waku v2 ENR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ethereum/devp2p/blob/6b0abc3d956a626c28dce1307ee9f546db17b6bd/discv5/discv5-theory.md#ad-placement-and-topic-radius&quot;&gt;Discv5 topic discovery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/harnen/service-discovery-paper&quot;&gt;Discv5 paper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ethereum/devp2p/blob/6b0abc3d956a626c28dce1307ee9f546db17b6bd/discv5/discv5-rationale.md#sybil-and-eclipse-attacks&quot;&gt;Discv5 vs Sybil and eclipse attacks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/libp2p/specs/issues/222&quot;&gt;peer exchange idea&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/rendezvous/README.md&quot;&gt;Rendezvous protocol&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/33/&quot;&gt;Waku v2 discv5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.1.md#prune-backoff-and-peer-exchange&quot;&gt;Gossipsub peer exchange&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.libp2p.io/concepts/nat/&quot;&gt;NAT traversal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_Plug_and_Play&quot;&gt;UPnP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6886&quot;&gt;NAT-PMP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6887&quot;&gt;PCP&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ethereum/devp2p/issues/199&quot;&gt;Discv5 topic efficiency issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kaiserd</name></author><category term="research" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vac.dev/assets/img/waku_v2_discv5_random_walk_estimation.svg" /><media:content medium="image" url="https://vac.dev/assets/img/waku_v2_discv5_random_walk_estimation.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introducing nwaku</title><link href="https://vac.dev/introducing-nwaku" rel="alternate" type="text/html" title="Introducing nwaku" /><published>2022-04-12T08:00:00+00:00</published><updated>2022-04-12T08:00:00+00:00</updated><id>https://vac.dev/introducing-nwaku</id><content type="html" xml:base="https://vac.dev/introducing-nwaku">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;If you’ve been following our &lt;a href=&quot;https://vac.dev/research-log/&quot;&gt;research log&lt;/a&gt;,
you’ll know that many things have happened in the world of Waku v2 since &lt;a href=&quot;/waku-v2-ethereum-coscup&quot;&gt;our last general update&lt;/a&gt;.
In line with our &lt;a href=&quot;https://vac.dev/#about&quot;&gt;long term goals&lt;/a&gt;,
we’ve introduced new protocols,
tweaked our existing protocols
and expanded our team.
We’ve also shown &lt;a href=&quot;/waku-v1-v2-bandwidth-comparison&quot;&gt;in a series of practical experiments&lt;/a&gt; that Waku v2 does indeed deliver on some of the &lt;a href=&quot;/waku-v2-plan&quot;&gt;theoretical advantages&lt;/a&gt; it was designed to have over its predecessor, Waku v1.
A &lt;a href=&quot;https://forum.vac.dev/t/vac-sustainability-and-business-workshop/116&quot;&gt;sustainability and business workshop&lt;/a&gt; led to the formulation of a clearer vision for Vac as a team.&lt;/p&gt;

&lt;p&gt;From the beginning, our protocol development has been complemented by various client implementations of these protocols,
first in &lt;a href=&quot;https://github.com/status-im/nim-waku&quot;&gt;Nim&lt;/a&gt;,
but later also in &lt;a href=&quot;https://github.com/status-im/js-waku&quot;&gt;JavaScript&lt;/a&gt;
and &lt;a href=&quot;https://github.com/status-im/go-waku&quot;&gt;Go&lt;/a&gt;.
A follow-up post will clarify the purposes, similarities and differences between these three clients.
The &lt;a href=&quot;https://github.com/status-im/nim-waku/tree/d2fccb5220144893f994a67f2cc26661247f101f/waku/v2&quot;&gt;Nim client&lt;/a&gt;, is our reference implementation,
developed by the research team in parallel with the specs
and building on a home-grown implementation of &lt;a href=&quot;https://github.com/status-im/nim-libp2p&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;libp2p&lt;/code&gt;&lt;/a&gt;.
The Nim client is suitable to run as &lt;a href=&quot;/waku-update&quot;&gt;a standalone adaptive node&lt;/a&gt;,
managed by individual operators
or as an encapsulated service node in other applications.
This post looks at some recent developments within the Nim client.&lt;/p&gt;

&lt;h2 id=&quot;1-nim-waku-is-now-known-as-nwaku&quot;&gt;1. &lt;em&gt;&lt;strong&gt;nim-waku&lt;/strong&gt;&lt;/em&gt; is now known as &lt;em&gt;&lt;strong&gt;nwaku&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Pronounced NWHA-koo.
You may already have seen us refer to “&lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt;” on Vac communication channels,
but it is now official:
The &lt;code class=&quot;highlighter-rouge&quot;&gt;nim-waku&lt;/code&gt; Waku v2 client has been named &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt;.
Why? Well, we needed a recognizable name for our client that could easily be referred to in everyday conversations
and &lt;code class=&quot;highlighter-rouge&quot;&gt;nim-waku&lt;/code&gt; just didn’t roll off the tongue.
We’ve followed the example of the closely related &lt;a href=&quot;https://github.com/status-im/nimbus-eth2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nimbus&lt;/code&gt; project&lt;/a&gt; to find a punchier name
that explicitly links the client to both the Waku set of protocols and the Nim language.&lt;/p&gt;

&lt;h2 id=&quot;2-improvements-in-stability-and-performance&quot;&gt;2. Improvements in stability and performance&lt;/h2&gt;

&lt;p&gt;The initial implementation of Waku v2 demonstrated how the suite of protocols can be applied
to form a generalized, peer-to-peer messaging network,
while addressing a wide range of adaptive requirements.
This allowed us to lift several protocol &lt;a href=&quot;https://rfc.vac.dev/&quot;&gt;specifications&lt;/a&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;raw&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;draft&lt;/code&gt; status,
indicating that a reference implementation exists for each.
However, as internal dogfooding increased and more external applications started using &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt;,
we stepped up our focus on the client’s stability and performance.
This is especially true where we want &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; to run unsupervised in a production environment
without any degradation in the services it provides.&lt;/p&gt;

&lt;p&gt;Some of the more significant productionization efforts over the last couple of months included:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Reworking the &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt; implementation to maintain stable memory usage
while storing historical messages
and serving multiple clients querying history simultaneously.
Previously, a &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt; node would see gradual service degradation
due to inefficient memory usage when responding to history queries.
Queries that often took longer than 8 mins now complete in under 100 ms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Improved peer management.
For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; nodes will now remove unreachable clients after a number of connection failures,
whereas they would previously keep accumulating dead peers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Improved disk usage.
&lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; nodes that persist historical messages on disk now manage their own storage size based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;--store-capacity&lt;/code&gt;.
This can significantly improve node start-up times.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More stability issues may be addressed in future as &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; matures,
but we’ve noticed a marked improvement in the reliability of running &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; nodes.
These include environments where &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; nodes are expected to run with a long uptime.
Vac currently operates two long-running fleets of &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; nodes, &lt;code class=&quot;highlighter-rouge&quot;&gt;wakuv2.prod&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wakuv2.test&lt;/code&gt;,
for internal dogfooding and
to serve as experimental bootstrapping nodes.
Status has also recently deployed similar fleets for production and testing based on &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt;.
Our goal is to have &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; be stable, performant and flexible enough
to be an attractive option for operators to run and maintain their own Waku v2 nodes.
See also the &lt;a href=&quot;#future-work&quot;&gt;future work&lt;/a&gt; section below for more on our general goal of &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; for operators&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;3-improvements-in-interoperability&quot;&gt;3. Improvements in interoperability&lt;/h2&gt;

&lt;p&gt;We’ve implemented several features that improve &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt;’s usability in different environments
and its interoperability with other Waku v2 clients.
One major step forward here was adding support for both secure and unsecured WebSocket connections as &lt;code class=&quot;highlighter-rouge&quot;&gt;libp2p&lt;/code&gt; transports.
This allows direct connectivity with &lt;code class=&quot;highlighter-rouge&quot;&gt;js-waku&lt;/code&gt;
and paves the way for native browser usage.
We’ve also added support for parsing and resolving DNS-type &lt;code class=&quot;highlighter-rouge&quot;&gt;multiaddrs&lt;/code&gt;,
i.e. multiaddress protocol schemes &lt;a href=&quot;https://github.com/multiformats/multiaddr/blob/b746a7d014e825221cc3aea6e57a92d78419990f/protocols.csv#L8-L11&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dns&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dns4&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dns6&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dnsaddr&lt;/code&gt;&lt;/a&gt;.
A &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; node can now also be &lt;a href=&quot;https://github.com/status-im/nim-waku/tree/d2fccb5220144893f994a67f2cc26661247f101f/waku/v2#configuring-a-domain-name&quot;&gt;configured with its own IPv4 DNS domain name&lt;/a&gt; 
allowing dynamic IP address allocation without impacting a node’s reachability by its peers.&lt;/p&gt;

&lt;h2 id=&quot;4-peer-discovery&quot;&gt;4. Peer discovery&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Peer discovery&lt;/em&gt; is the method by which nodes become aware of each other’s existence.
The question of peer discovery in a Waku v2 network has been a focus area since the protocol was first conceptualized.
Since then several different approaches to discovery have been proposed and investigated.
We’ve implemented three discovery mechanisms in &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; so far:&lt;/p&gt;

&lt;h3 id=&quot;dns-based-discovery&quot;&gt;DNS-based discovery&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; nodes can retrieve an authenticated, updateable list of peers via DNS to bootstrap connection to a Waku v2 network.
Our implementation is based on &lt;a href=&quot;https://eips.ethereum.org/EIPS/eip-1459&quot;&gt;EIP-1459&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;gossipsub-peer-exchange&quot;&gt;GossipSub peer exchange&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.1.md#prune-backoff-and-peer-exchange&quot;&gt;GossipSub Peer Exchange (PX)&lt;/a&gt; is a GossipSub v1.1 mechanism
whereby a pruning peer may provide a pruned peer with a set of alternative peers
where it can connect to reform its mesh.
This is a very suitable mechanism to gradually discover more peers
from an initial connection to a small set of bootstrap peers.
It is enabled in a &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; node by default.&lt;/p&gt;

&lt;h3 id=&quot;waku-node-discovery-protocol-v5&quot;&gt;Waku Node Discovery Protocol v5&lt;/h3&gt;

&lt;p&gt;This is a DHT-based discovery mechanism adapted to store and relay &lt;em&gt;node records&lt;/em&gt;.
Our implementation is based on &lt;a href=&quot;https://github.com/ethereum/devp2p/blob/fa6428ada7385c13551873b2ae6ad2457c228eb8/discv5/discv5-theory.md&quot;&gt;Ethereum’s Discovery v5 protocol&lt;/a&gt;
with some &lt;a href=&quot;https://rfc.vac.dev/spec/33/&quot;&gt;minor modifications&lt;/a&gt; to isolate our discovery network from that of Ethereum.
The decision to separate the Waku Discovery v5 network from Ethereum’s was made on considerations of lookup efficiency.
This comes at a possible tradeoff in network resilience.
We are considering merging with the Ethereum Discovery v5 network in future,
or even implement a hybrid solution.
&lt;a href=&quot;https://forum.vac.dev/t/waku-v2-discv5-roadmap-discussion/121/8&quot;&gt;This post&lt;/a&gt; explains the decision and future steps.&lt;/p&gt;

&lt;h2 id=&quot;5-spam-protection-using-rln&quot;&gt;5. Spam protection using RLN&lt;/h2&gt;

&lt;p&gt;An early addition to our suite of protocols was &lt;a href=&quot;https://rfc.vac.dev/spec/32/&quot;&gt;an extension of &lt;code class=&quot;highlighter-rouge&quot;&gt;11/WAKU-RELAY&lt;/code&gt;&lt;/a&gt;
that provided spam protection using &lt;a href=&quot;https://rfc.vac.dev/spec/32/&quot;&gt;Rate Limiting Nullifiers (RLN)&lt;/a&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; client now contains a working demonstration and integration of RLN relay.
Check out &lt;a href=&quot;https://github.com/status-im/nim-waku/blob/ee96705c7fbe4063b780ac43b7edee2f6c4e351b/docs/tutorial/rln-chat2-live-testnet.md&quot;&gt;this tutorial&lt;/a&gt; to see the protocol in action using a toy chat application built on &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt;.
We’d love for people to join us in dogfooding RLN spam protection as part of our operator incentive testnet.
Feel free to join our &lt;a href=&quot;https://discord.gg/KNj3ctuZvZ&quot;&gt;Vac Discord&lt;/a&gt; server
and head to the &lt;code class=&quot;highlighter-rouge&quot;&gt;#rln&lt;/code&gt; channel for more information.&lt;/p&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future work&lt;/h2&gt;

&lt;p&gt;As we continue working towards our goal of a fully decentralized, generalized and censorship-resistant messaging protocol,
these are some of the current and future focus areas for &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt;:&lt;/p&gt;

&lt;h3 id=&quot;reaching-out-to-operators&quot;&gt;Reaching out to operators:&lt;/h3&gt;

&lt;p&gt;We are starting to push for operators to run and maintain their own Waku v2 nodes,
preferably contributing to the default Waku v2 network as described by the default pubsub topic (&lt;code class=&quot;highlighter-rouge&quot;&gt;/waku/2/default-waku/proto&lt;/code&gt;).
Amongst other things, a large fleet of stable operator-run Waku v2 nodes will help secure the network,
provide valuable services to a variety of applications
and ensure the future sustainability of both Vac as a research organization and the Waku suite of protocols.&lt;/p&gt;

&lt;p&gt;We are targeting &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; as the main option for operator-run nodes.&lt;br /&gt;
Specifically, we aim to provide through &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;a lightweight and robust Waku v2 client.
This client must be first in line to support innovative and new Waku v2 protocols,
but configurable enough to serve the adaptive needs of various operators.&lt;/li&gt;
  &lt;li&gt;an easy-to-follow guide for operators to configure,
set up and maintain their own nodes&lt;/li&gt;
  &lt;li&gt;a set of operator-focused tools to monitor and maintain a running node&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;better-conversational-security-layer-guarantees&quot;&gt;Better conversational security layer guarantees&lt;/h3&gt;

&lt;p&gt;Conversational security guarantees in Waku v2 are currently designed around the Status application.
Developers building their own applications on top of Waku would therefore
either have to reimplement a set of tools similar to Status
or build their own security solutions on the application layer above Waku.
We are working on &lt;a href=&quot;https://github.com/vacp2p/research/issues/97&quot;&gt;a set of features&lt;/a&gt; built into Waku
that will provide the general security properties Waku users may desire
and do so in a modern and simple way.
This is useful for applications outside of Status that want similar security guarantees.
As a first step, we’ve already made good progress toward &lt;a href=&quot;https://forum.vac.dev/t/noise-handshakes-as-key-exchange-mechanism-for-waku2/130&quot;&gt;integrating noise handshakes&lt;/a&gt; as a key exchange mechanism in Waku v2.&lt;/p&gt;

&lt;h3 id=&quot;protocol-incentivization&quot;&gt;Protocol incentivization&lt;/h3&gt;

&lt;p&gt;We want to design incentivization around our protocols to encourage desired behaviors in the Waku network,
rewarding nodes providing costly services
and punishing adversarial actions.
This will increase the overall security of the network
and encourage operators to run their own Waku nodes.
In turn, the sustainability of Vac as an organization will be better guaranteed.
As such, protocol incentivization was a major focus in our recent &lt;a href=&quot;https://forum.vac.dev/t/vac-sustainability-and-business-workshop/&quot;&gt;Vac Sustainability and Business Workshop&lt;/a&gt;.
Our first step here is to finish integrating RLN relay into Waku
with blockchain interaction to manage members,
punish spammers
and reward spam detectors.
After this, we want to design monetary incentivization for providers of &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lightpush&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; services.
This may also tie into a reputation mechanism for service nodes based on a network-wide consensus on service quality.
A big challenge for protocol incentivization is doing it in a private fashion,
so we can keep similar metadata protection guarantees as the Waku base layer.
This ties into our focus on &lt;a href=&quot;https://forum.vac.dev/t/vac-3-zk/97&quot;&gt;Zero Knowledge tech&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;improved-store-capacity&quot;&gt;Improved store capacity&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; store currently serves as an efficient in-memory store for historical messages,
dimensioned by the maximum number of messages the store node is willing to keep.
This makes the &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; store appropriate for keeping history over a short term
without any time-based guarantees,
but with the advantage of providing fast responses to history queries.
Some applications, such as Status, require longer-term historical message storage
with time-based dimensioning
to guarantee that messages will be stored for a specified minimum period.
Because of the relatively high cost of memory compared to disk space,
a higher capacity store, with time guarantees, should operate as a disk-only database of historical messages.
This is an ongoing effort.&lt;/p&gt;

&lt;h3 id=&quot;multipurpose-discovery&quot;&gt;Multipurpose discovery&lt;/h3&gt;

&lt;p&gt;In addition to &lt;a href=&quot;#4-peer-discovery&quot;&gt;the three discovery methods&lt;/a&gt; already implemented in &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt;,
we are working on improving discovery on at least three fronts:&lt;/p&gt;

&lt;h4 id=&quot;capability-discovery&quot;&gt;&lt;em&gt;Capability discovery:&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Waku v2 nodes may be interested in peers with specific capabilities, for example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;peers within a specific pubsub topic mesh,&lt;/li&gt;
  &lt;li&gt;peers with &lt;strong&gt;store&lt;/strong&gt; capability,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;store&lt;/strong&gt; peers with x days of history for a specific content topic, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Capability discovery entails mechanisms by which such capabilities can be advertised and discovered/negotiated.
One major hurdle to overcome is the increased complexity of finding a node with specific capabilities within the larger network (a needle in a haystack).
See the &lt;a href=&quot;https://github.com/vacp2p/rfc/issues/429&quot;&gt;original problem statement&lt;/a&gt; for more.&lt;/p&gt;

&lt;h4 id=&quot;improvements-in-discovery-v5&quot;&gt;&lt;em&gt;Improvements in Discovery v5&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Of the implemented discovery methods,
Discovery v5 best addresses our need for a decentralized and scalable discovery mechanism.
With the basic implementation done,
there are some improvements planned for Discovery v5,
including methods to increase security such as merging with the Ethereum Discovery v5 network,
introducing explicit NAT traversal
and utilizing &lt;a href=&quot;https://github.com/ethereum/devp2p/blob/fa6428ada7385c13551873b2ae6ad2457c228eb8/discv5/discv5-theory.md#topic-advertisement&quot;&gt;topic advertisement&lt;/a&gt;.
The &lt;a href=&quot;https://forum.vac.dev/t/waku-v2-discv5-roadmap-discussion/121&quot;&gt;Waku v2 Discovery v5 Roadmap&lt;/a&gt; contains more details.&lt;/p&gt;

&lt;h4 id=&quot;generalized-peer-exchange&quot;&gt;&lt;em&gt;Generalized peer exchange&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; already implements &lt;a href=&quot;https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.1.md#prune-backoff-and-peer-exchange&quot;&gt;GossipSub peer exchange&lt;/a&gt;.
We now need a general request-response mechanism outside of GossipSub
by which a node may learn about other Waku v2 nodes
by requesting and receiving a list of peers from a neighbor.
This could, for example, be a suitable way for resource-restricted devices to request a stronger peer
to perform a random Discovery v5 lookup on their behalf
or simply to be informed of a subset of the peers known to that neighbor.
See &lt;a href=&quot;https://github.com/vacp2p/rfc/issues/495&quot;&gt;this issue&lt;/a&gt; for more.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This concludes a general outline of some of the main recent developments in the &lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; client
and a summary of the current and future focus areas.
Much more is happening behind the scenes, of course,
so for more information, or to join the conversation,
feel free to join our &lt;a href=&quot;https://discord.gg/KNj3ctuZvZ&quot;&gt;Vac Discord&lt;/a&gt; server
or to check out the &lt;a href=&quot;https://github.com/status-im/nim-waku&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nwaku&lt;/code&gt; repo on Github&lt;/a&gt;.
You can also view the changelog for past releases &lt;a href=&quot;https://github.com/status-im/nim-waku/releases&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/17/&quot;&gt;17/WAKU-RLN-RELAY&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/32/&quot;&gt;32/RLN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/33/&quot;&gt;33/WAKU2-DISCV5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vacp2p/rfc/issues/429&quot;&gt;Capabilities advertising&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/status-im/nim-waku/tree/d2fccb5220144893f994a67f2cc26661247f101f/waku/v2#configuring-a-domain-name&quot;&gt;Configuring a domain name&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vacp2p/research/issues/97&quot;&gt;Conversational security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ethereum/devp2p/blob/fa6428ada7385c13551873b2ae6ad2457c228eb8/discv5/discv5-theory.md#topic-advertisement&quot;&gt;Discovery v5 Topic Advertisement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eips.ethereum.org/EIPS/eip-1459&quot;&gt;EIP-1459&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.1.md#prune-backoff-and-peer-exchange&quot;&gt;GossipSub Peer Exchange&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/status-im/go-waku&quot;&gt;go-waku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/status-im/js-waku&quot;&gt;js-waku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/multiformats/multiaddr/blob/b746a7d014e825221cc3aea6e57a92d78419990f/protocols.csv#L8-L11&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;multiaddr&lt;/code&gt; formats&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/status-im/nimbus-eth2&quot;&gt;nimbus-eth2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/status-im/nim-libp2p&quot;&gt;nim-libp2p&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/status-im/nim-waku&quot;&gt;nim-waku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/status-im/nim-waku/releases&quot;&gt;nim-waku releases&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ethereum/devp2p/blob/fa6428ada7385c13551873b2ae6ad2457c228eb8/discv5/discv5-theory.md&quot;&gt;Node Discovery Protocol v5 - Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://forum.vac.dev/t/noise-handshakes-as-key-exchange-mechanism-for-waku2/130&quot;&gt;Noise handshakes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/status-im/nim-waku/blob/ee96705c7fbe4063b780ac43b7edee2f6c4e351b/docs/tutorial/rln-chat2-live-testnet.md&quot;&gt;RLN tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://forum.vac.dev/t/vac-3-zk/97&quot;&gt;Vac &amp;lt;3 ZK&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vac.dev/#about&quot;&gt;Vac About page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vac.dev/research-log/&quot;&gt;Vac Research log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/&quot;&gt;Vac RFC site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://forum.vac.dev/t/vac-sustainability-and-business-workshop/&quot;&gt;Vac Sustainability and Business Workshop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/waku-update&quot;&gt;Waku Update&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/waku-v1-v2-bandwidth-comparison&quot;&gt;Waku v1 vs Waku v2: Bandwidth Comparison&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vacp2p/rfc/issues/495&quot;&gt;Waku v2 Peer Exchange&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://forum.vac.dev/t/waku-v2-discv5-roadmap-discussion/121&quot;&gt;Waku v2 Discovery v5 Roadmap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/waku-v2-plan&quot;&gt;What’s the Plan for Waku v2?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>hanno</name></author><category term="research" /><summary type="html">Background</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vac.dev/assets/img/vac.png" /><media:content medium="image" url="https://vac.dev/assets/img/vac.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Opinion: Pseudo-ethics in the Surveillance Tech Industry</title><link href="https://vac.dev/ethics-surveillance-tech" rel="alternate" type="text/html" title="Opinion: Pseudo-ethics in the Surveillance Tech Industry" /><published>2021-12-03T08:00:00+00:00</published><updated>2021-12-03T08:00:00+00:00</updated><id>https://vac.dev/ethics-surveillance-tech</id><content type="html" xml:base="https://vac.dev/ethics-surveillance-tech">&lt;p&gt;&lt;em&gt;This is an opinion piece by pseudonymous contributor, circe.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;

&lt;p&gt;The Vac team aims to provide a public good in the form of freely available, open source tools and protocols for decentralized communication.
As such, we value our independence and the usefulness of our protocols for a wide range of applications.
At the same time, we realize that all technical development, including ours, has a moral component.
As a diverse team we are guided by a shared devotion to the principles of human rights and liberty.
This explains why we place such a high premium on security, censorship-resistance and privacy -
a stance we &lt;a href=&quot;https://our.status.im/our-principles/&quot;&gt;share with the wider Status Network&lt;/a&gt;.
The post below takes a different approach from our usual more technical analyses,
by starting to peel back the curtain on the ethical shortfalls of the global surveillance tech industry.&lt;/p&gt;

&lt;h2 id=&quot;spotlight-on-an-industry&quot;&gt;Spotlight on an industry&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.apple.com/newsroom/2021/11/apple-sues-nso-group-to-curb-the-abuse-of-state-sponsored-spyware/&quot;&gt;Apple’s announcement&lt;/a&gt; of their lawsuit against Israel’s NSO Group
marks the latest in a series of recent setbacks for the surveillance tech company.
In early November, the &lt;a href=&quot;https://public-inspection.federalregister.gov/2021-24123.pdf&quot;&gt;United States blacklisted the firm&lt;/a&gt;,
citing concerns about the use of their spyware by foreign governments targeting civilians such as “journalists, businesspeople, activists” and more.
The company is already &lt;a href=&quot;https://www.reuters.com/article/us-facebook-cyber-whatsapp-nsogroup-idUSKBN1X82BE&quot;&gt;embroiled in a lawsuit with Whatsapp&lt;/a&gt;
over their exploit of the chat app’s video calling service to install malware on target devices.
NSO Group’s most infamous product, &lt;a href=&quot;https://forbiddenstories.org/case/the-pegasus-project/&quot;&gt;Pegasus&lt;/a&gt;, operates as a hidden exploit installed on victims’ mobile phones,
sometimes without even requiring as much as an unguarded click on a malicious link.
It has the potential to lay bare, and report to its owners, &lt;em&gt;everything&lt;/em&gt; within the reach of the infected device.
For most people this amounts to a significant portion of their private lives and thoughts.
Pegasus can read your private messages (even encrypted), collect your passwords, record calls, track your location and access your device’s microphone and camera.
No activity or application on an infected phone would be hidden.&lt;/p&gt;

&lt;p&gt;The latest controversies are perhaps less because of the novelty of the revelations -
the existence of Pegasus has been known to civil activists &lt;a href=&quot;https://www.bbc.com/news/technology-37192670&quot;&gt;since at least 2016&lt;/a&gt;.
Rather, the public was reminded again of the potential scope of surveillance tech
in the indiscriminate use of Pegasus on private citizens.
This has far-reaching implications for human freedoms worldwide.
Earlier this year, a &lt;a href=&quot;https://www.theguardian.com/world/2021/jul/18/revealed-leak-uncovers-global-abuse-of-cyber-surveillance-weapon-nso-group-pegasus&quot;&gt;leaked list of over 50,000 targets&lt;/a&gt;, or possible targets, of Pegasus included
the phone numbers of human rights advocates, independent journalists, lawyers and political activists.
This should have come as no surprise.
The type of autocratically inclined agents, and governments, who would venture to buy and use such invasive cyber-arms often target those they find politically inconvenient.
Pegasus, and similar technologies, simply extend the reach and capacity of such individuals and governments -
no border or distance, no political rank or social advantage, no sanctity of profession or regard for dignity,
provide any indemnity from becoming a victim.
Your best hope is to remain uninteresting enough to escape consideration.&lt;/p&gt;

&lt;p&gt;The NSO Group has, of course, denied allegations of culpability and questions the authenticity of the list.
At this stage, the latter is almost beside the point:
Amnesty International’s cybersecurity team, Security Lab, &lt;em&gt;did&lt;/em&gt; find &lt;a href=&quot;https://www.amnesty.org/en/latest/research/2021/07/forensic-methodology-report-how-to-catch-nso-groups-pegasus/#_ftn1&quot;&gt;forensic evidence of Pegasus&lt;/a&gt; on the phones of several volunteers whose numbers appeared on the original list,
including those of journalists and human rights activists.
(Security Lab has since opened up their &lt;a href=&quot;https://github.com/mvt-project/mvt&quot;&gt;infection finding tool&lt;/a&gt; to the public.)
French intelligence has similarly &lt;a href=&quot;https://www.theguardian.com/news/2021/aug/02/pegasus-spyware-found-on-journalists-phones-french-intelligence-confirms&quot;&gt;inspected and confirmed&lt;/a&gt; infection of at least three devices belonging to journalists.
The phones of several people who were close to the Saudi-American journalist, Jamal Khashoggi, were &lt;a href=&quot;https://www.bbc.com/news/world-57891506&quot;&gt;confirmed hacked&lt;/a&gt;
both before and after Khashoggi’s brutal murder at the Saudi embassy in Istanbul in 2018.
&lt;a href=&quot;https://www.theguardian.com/news/2021/sep/21/hungary-journalist-daniel-nemeth-phones-infected-with-nso-pegasus-spyware&quot;&gt;More reports&lt;/a&gt; of confirmed Pegasus hacks are still published with some regularity.
It is now an open secret that many authoritarian governments have bought Pegasus.
It’s not difficult to extrapolate from existing reports and such clients’ track records
what the potential injuries to human freedoms are that they can inflict with access to such a powerful cyberweapon.&lt;/p&gt;

&lt;h2 id=&quot;a-typical-response&quot;&gt;A typical response&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.theguardian.com/news/2021/jul/18/response-from-nso-and-governments&quot;&gt;NSO’s response&lt;/a&gt; to the allegations follows a textbook approach
of avoiding earnest ethical introspection on the manufacturing, and selling, of cyber-arms.
Firstly, shift ethical responsibility to a predetermined process, a list of checkboxes of your own making.
The Group, for example, claims to sell only to “vetted governments”, following a classification process
of which they have now &lt;a href=&quot;https://www.nsogroup.com/wp-content/uploads/2021/06/ReportBooklet.pdf&quot;&gt;published some procedural details&lt;/a&gt; but no tangible criteria.
The next step is to reaffirm continuously, and repetitively, your dedication to the &lt;em&gt;legal&lt;/em&gt; combat against crime,
&lt;a href=&quot;https://www.nsogroup.com/wp-content/uploads/2021/06/ReportBooklet.pdf&quot;&gt;“legitimate law enforcement agencies”&lt;/a&gt; (note the almost tautological phrasing),
adherence to international arms trade laws,
compliance clauses in customer contracts, etc.
Thirdly, having been absolved of any moral suspicions that might exist about product and process,
from conception to engineering to trade,
distance yourself from the consequences of its use in the world.
&lt;a href=&quot;https://www.theguardian.com/news/2021/jul/18/response-from-nso-and-governments&quot;&gt;“NSO does not operate its technology, does not collect, nor possesses, nor has any access to any kind of data of its customers.”&lt;/a&gt;
It is interesting that directly after this statement they claim with contradictory confidence that
their “technology was not associated in any way with the heinous murder of Jamal Khashoggi”.
The unapologetic tone seems hardly appropriate when the same document confirms that the Group had to
shut down customers’ systems due to “confirmed misuse” and have had to do so “multiple times” in the past.
Given all this, the response manages to evade any serious interrogation of the “vetting” process itself,
which forced the company to reject “approximately 15% of potential new opportunities for Pegasus” in one year.
Courageous.&lt;/p&gt;

&lt;p&gt;We have heard this all before.
There exists a multi-billion dollar industry of private companies and engineering firms &lt;a href=&quot;https://www.economist.com/business/2019/12/12/offering-software-for-snooping-to-governments-is-a-booming-business&quot;&gt;thriving on proceeds&lt;/a&gt; from
selling surveillance tools and cyber-arms to dubious agencies and foreign governments.
In turn, the most power-hungry and oppressive regimes often &lt;em&gt;rely&lt;/em&gt; on such technological innovations -
for which they lack the in-country engineering expertise -
to maintain control, suppress uprisings, intimidate opposing journalists, and track their citizens.
It’s a lucrative business opportunity, and resourceful companies have sprung up everywhere to supply this demand,
often in countries where citizens, including employees of the company, would be horrified if they were similarly subject to the oppressions of their own products.
When, in 2014, Italy’s &lt;em&gt;HackingTeam&lt;/em&gt; were pulsed by the United Nations about their (then alleged) selling of spyware to Sudan,
which would have been a contravention of the UN’s weapon export ban,
they simply replied that their product was not controlled as a weapon and therefore not subject to such scrutiny.
They remained within their legal bounds, technically.
Furthermore, they similarly shifted ethical responsibility to external standards of legitimacy,
claiming their &lt;a href=&quot;https://citizenlab.ca/2014/02/mapping-hacking-teams-untraceable-spyware/&quot;&gt;“software is not sold to governments that are blacklisted by the EU, the US, NATO, and similar international organizations”&lt;/a&gt;.
When the company themselves were &lt;a href=&quot;https://www.wired.com/2015/07/hacking-team-breach-shows-global-spying-firm-run-amok/&quot;&gt;hacked in 2015&lt;/a&gt;,
revelations (confirmations, that is) of widespread misuse by repressive governments were damaging enough to force them to disappear and rebrand as Memento Labs.
&lt;a href=&quot;https://www.mem3nt0.com/en/&quot;&gt;Their website&lt;/a&gt; boasts an impressive list of statutes, regulations, procedures, export controls and legal frameworks,
all of which the rebranded hackers proudly comply with.
Surely no further ethical scrutiny is necessary?&lt;/p&gt;

&lt;h2 id=&quot;ethics--the-law&quot;&gt;Ethics != the law&lt;/h2&gt;

&lt;h3 id=&quot;the-law-is-trailing-behind&quot;&gt;The law is trailing behind&lt;/h3&gt;

&lt;p&gt;Such recourse to the &lt;em&gt;legality&lt;/em&gt; of your action as ethical justification is moot for several reasons.
The first is glaringly obvious -
our laws are ill-equipped to address the implications of modern technology.
Legal systems are a cumbersome inheritance built over generations.
This is especially true of the statutes and regulations governing international trade, behind which these companies so often hide.
Our best legal systems are trailing miles behind the technology for which we seek guidelines.
Legislators are still struggling to make sense of technologies like face recognition,
the repercussions of smart devices acting “on their own” and biases in algorithms.
To claim you are performing ethical due diligence by resorting to an outdated and incomplete system of legal codes is disingenuous.&lt;/p&gt;

&lt;h3 id=&quot;the-law-depends-on-ethics&quot;&gt;The law depends on ethics&lt;/h3&gt;

&lt;p&gt;The second reason is more central to my argument,
and an important flaw in these sleight of hand justifications appearing from time to time in the media.
Ethics can in no way be confused as synonymous with legality or legitimacy.
These are incommensurable concepts.
In an ideal world, of course, the law is meant to track the minimum standards of ethical conduct in a society.
Laws are often drafted exactly from some ethical, and practical, impulse to minimize harmful conduct
and provide for corrective and punitive measures where transgressions do occur.
The law, however, has a much narrower scope than ethics.
It can be just or unjust.
In fact, it is in need of ethics to constantly reform.
Ethics and values are born out of collective self-reflection.
It develops in our conversation with ourselves and others about the type of society we strive for.
As such, an ethical worldview summarizes our deepest intuitions about how we should live and measure our impact on the world.
For this reason, ethics is primarily enforced by social and internal pressures, not legal boundaries -
our desire to do what &lt;em&gt;ought&lt;/em&gt; to be done, however we define that.
Ethics is therefore a much grander scheme than global legal systems
and the diplomatic frameworks that grants legitimacy to governments.
These are but one limited outflow of the human aspiration to form societies in accordance with our ideologies and ethics.&lt;/p&gt;

&lt;h3 id=&quot;international-law-is-vague-and-exploitable&quot;&gt;International law is vague and exploitable&lt;/h3&gt;

&lt;p&gt;Of course, the cyber-arms trade has a favorite recourse, &lt;em&gt;international&lt;/em&gt; law, which is even more limited.
Since such products are seldomly sold to governments and agencies within the country of production,
it enables a further distancing from consequences.
Many private surveillance companies are based in fairly liberal societies with (seemingly) strict emphases on human rights in their domestic laws.
International laws are much more complicated - for opportunists a synonym for “more grey areas in which to hide”.
Company conduct can now be governed, and excused, by a system that follows
the whims of autocrats with exploitative intent and vastly different ethical conceptions from the company’s purported aims.
International law, and the ways it is most often enforced by way of, say, UN-backed sanctions,
have long been shaped by the compromises of international diplomacy.
To be blunt: these laws are weak and subject to exactly the sort of narrow interests behind which mercenaries have always hidden.
The surveillance tech industry is no exception.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;My point is simple:
selling cyber-arms with the potential to become vast tools of oppression to governments and bodies with blatant histories of human rights violations,
and all but the publicly announced intention to continue operating in this way,
is categorically unconscionable.
This seems obvious no matter what ethics system you argue from,
provided it harbors any consideration for human dignity and freedom.
It is a sign of poor moral discourse that such recourses to law and legitimacy are often considered synonymous with ethical justification.
“&lt;em&gt;I have acted within the bounds of law&lt;/em&gt;”, &lt;em&gt;“We supply only to legitimate law enforcement agencies”&lt;/em&gt;, etc. are no substitutes.
Ethical conduct requires an honest evaluation of an action against some conception of “the good”,
however you define that.
Too often the surveillance tech industry precisely sidesteps this question,
both in internal processes and external rationalisations to a concerned public.&lt;/p&gt;

&lt;p&gt;John Locke, he of the life-liberty-and-property, articulated the idea that government exists solely through the consent of the governed.
Towards the end of the 17th century, he wrote in his &lt;em&gt;Second Treatise on Civil Government&lt;/em&gt;,
“[w]henever legislators endeavor to take away,
and destroy the property of the people, or to reduce them to slavery under arbitrary power,
they put themselves in a state of war with the people, who are thereupon absolved from any further obedience”.
The inference is straightforward and humanist in essence:
legitimacy is not something that is conferred by governments and institutions.
Rather, they derive their legitimacy from us, their citizens, holding them to standards of ethics and societal ideals.
This legitimacy only remains in tact as long as this mandate is honored and continuously extended by a well-informed public.
This is the principle of informed consent on which all reciprocal ethics is based.&lt;/p&gt;

&lt;p&gt;The surveillance tech industry may well have nothing more or less noble in mind than profit-making within legal bounds
when developing and selling their products.
However, when such companies are revealed again and again to have supplied tools of gross human rights violations to known human rights violators,
they will do well to remember that ethics always &lt;em&gt;precedes&lt;/em&gt; requirements of legality and legitimacy.
It is a fallacy to take normative guidance from the concept of “legitimacy”
if the concept itself depends on such normative guidelines for definition.
Without examining the ethical standards by which institutions, governments, and laws, were created,
no value-judgements about their legitimacy can be made.
Hiding behind legal compliance as substitute for moral justification is not enough.
Targets of increasingly invasive governmental snooping are too often chosen precisely to suppress the mechanisms from which the legitimacy of such governments flow -
the consent of ordinary civilians.
Free and fair elections, free speech, free media, freedom of thought are all at risk.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://our.status.im/our-principles/&quot;&gt;Status Principles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://public-inspection.federalregister.gov/2021-24123.pdf&quot;&gt;Federal Register: Addition of Certain Entities to the Entity List&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://forbiddenstories.org/case/the-pegasus-project/&quot;&gt;forbiddenstories.org: The Pegasus Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/news/series/pegasus-project&quot;&gt;theguardian.com: The Pegasus Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amnesty.org/en/latest/research/2021/07/forensic-methodology-report-how-to-catch-nso-groups-pegasus/#_ftn1&quot;&gt;amnesty.org Forensic Methodology Report: How to catch NSO Group’s Pegasus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apple.com/newsroom/2021/11/apple-sues-nso-group-to-curb-the-abuse-of-state-sponsored-spyware/&quot;&gt;Apple sues NSO Group to curb the abuse of state-sponsored spyware&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bbc.com/news/technology-37192670&quot;&gt;bbc.com: Who are the hackers who cracked the iPhone?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bbc.com/news/world-57891506&quot;&gt;bbc.com: Pegasus: Who are the alleged victims of spyware targeting?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://citizenlab.ca/2014/02/mapping-hacking-teams-untraceable-spyware/&quot;&gt;citizenlab.ca: Mapping Hacking Team’s “Untraceable” Spyware&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.economist.com/business/2019/12/12/offering-software-for-snooping-to-governments-is-a-booming-business&quot;&gt;economist.com: Offering software for snooping to governments is a booming business&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mem3nt0.com/en/&quot;&gt;Memento Labs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mvt-project/mvt&quot;&gt;Mobile Verification Toolkit to identify compromised devices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nsogroup.com/wp-content/uploads/2021/06/ReportBooklet.pdf&quot;&gt;NSO Group: Transparency and Responsibility Report 2021&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reuters.com/article/us-facebook-cyber-whatsapp-nsogroup-idUSKBN1X82BE&quot;&gt;reuters.com: WhatsApp sues Israel’s NSO for allegedly helping spies hack phones around the world&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.wired.com/2015/07/hacking-team-breach-shows-global-spying-firm-run-amok/&quot;&gt;wired.com: Hacking Team Breach Shows a Global Spying Firm Run Amok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>circe</name></author><category term="research" /><summary type="html">This is an opinion piece by pseudonymous contributor, circe.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vac.dev/assets/img/vac.png" /><media:content medium="image" url="https://vac.dev/assets/img/vac.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Waku v1 vs Waku v2: Bandwidth Comparison</title><link href="https://vac.dev/waku-v1-v2-bandwidth-comparison" rel="alternate" type="text/html" title="Waku v1 vs Waku v2: Bandwidth Comparison" /><published>2021-11-03T08:00:00+00:00</published><updated>2021-11-03T08:00:00+00:00</updated><id>https://vac.dev/waku-v1-vs-waku-v2</id><content type="html" xml:base="https://vac.dev/waku-v1-v2-bandwidth-comparison">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://vac.dev/waku-v2-plan&quot;&gt;original plan&lt;/a&gt; for Waku v2 suggested theoretical improvements in resource usage over Waku v1,
mainly as a result of the improved amplification factors provided by GossipSub.
In its turn, &lt;a href=&quot;https://vac.dev/fixing-whisper-with-waku&quot;&gt;Waku v1 proposed improvements&lt;/a&gt; over its predecessor, Whisper.&lt;/p&gt;

&lt;p&gt;Given that Waku v2 is aimed at resource restricted environments,
we are specifically interested in its scalability and resource usage characteristics.
However, the theoretical performance improvements of Waku v2 over Waku v1,
has never been properly benchmarked and tested.&lt;/p&gt;

&lt;p&gt;Although we’re working towards a full performance evaluation of Waku v2,
this would require significant planning and resources,
if it were to simulate “real world” conditions faithfully and measure bandwidth and resource usage across different network connections,
robustness against attacks/losses, message latencies, etc.
(There already exists a fairly comprehensive &lt;a href=&quot;https://research.protocol.ai/publications/gossipsub-v1.1-evaluation-report/vyzovitis2020.pdf&quot;&gt;evaluation of GossipSub v1.1&lt;/a&gt;,
on which &lt;a href=&quot;https://rfc.vac.dev/spec/11/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;11/WAKU2-RELAY&lt;/code&gt;&lt;/a&gt; is based.)&lt;/p&gt;

&lt;p&gt;As a starting point,
this post contains a limited and local comparison of the &lt;em&gt;bandwidth&lt;/em&gt; profile (only) between Waku v1 and Waku v2.
It reuses and adapts existing network simulations for &lt;a href=&quot;https://github.com/status-im/nim-waku/blob/master/waku/v1/node/quicksim.nim&quot;&gt;Waku v1&lt;/a&gt; and &lt;a href=&quot;https://github.com/status-im/nim-waku/blob/master/waku/v2/node/quicksim2.nim&quot;&gt;Waku v2&lt;/a&gt;
and compares bandwidth usage for similar message propagation scenarios.&lt;/p&gt;

&lt;h2 id=&quot;theoretical-improvements-in-waku-v2&quot;&gt;Theoretical improvements in Waku v2&lt;/h2&gt;

&lt;p&gt;Messages are propagated in Waku v1 using &lt;a href=&quot;https://en.wikipedia.org/wiki/Flooding_(computer_networking)&quot;&gt;flood routing&lt;/a&gt;.
This means that every peer will forward every new incoming message to all its connected peers (except the one it received the message from).
This necessarily leads to unnecessary duplication (termed &lt;em&gt;amplification factor&lt;/em&gt;),
wasting bandwidth and resources.
What’s more, we expect this effect to worsen the larger the network becomes,
as each &lt;em&gt;connection&lt;/em&gt; will receive a copy of each message,
rather than a single copy per peer.&lt;/p&gt;

&lt;p&gt;Message routing in Waku v2 follows the &lt;code class=&quot;highlighter-rouge&quot;&gt;libp2p&lt;/code&gt; &lt;em&gt;GossipSub&lt;/em&gt; protocol,
which lowers amplification factors by only sending full message contents to a subset of connected peers.
As a Waku v2 network grows, each peer will limit its number of full-message (“mesh”) peerings -
&lt;code class=&quot;highlighter-rouge&quot;&gt;libp2p&lt;/code&gt; suggests a maximum of &lt;code class=&quot;highlighter-rouge&quot;&gt;12&lt;/code&gt; such connections per peer.
This allows much better scalability than a flood-routed network.
From time to time, a Waku v2 peer will send metadata about the messages it has seen to other peers (“gossip” peers).&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://hackmd.io/@vac/main/%2FYYlZYBCURFyO_ZG1EiteWg#11WAKU2-RELAY-gossipsub&quot;&gt;this explainer&lt;/a&gt; for a more detailed discussion.&lt;/p&gt;

&lt;h2 id=&quot;methodology&quot;&gt;Methodology&lt;/h2&gt;

&lt;p&gt;The results below contain only some scenarios that provide an interesting contrast between Waku v1 and Waku v2.
For example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Star_network&quot;&gt;star network topologies&lt;/a&gt; do not show a substantial difference between Waku v1 and Waku v2.
This is because each peer relies on a single connection to the central node for every message,
which barely requires any routing:
each connection receives a copy of every message for both Waku v1 and Waku v2.
Hybrid topologies similarly show only a difference between Waku v1 and Waku v2 for network segments with &lt;a href=&quot;https://en.wikipedia.org/wiki/Mesh_networking&quot;&gt;mesh-like connections&lt;/a&gt;,
where routing decisions need to be made.&lt;/p&gt;

&lt;p&gt;For this reason, the following approach applies to all iterations:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Simulations are run &lt;strong&gt;locally&lt;/strong&gt;.
This limits the size of possible scenarios due to local resource constraints,
but is a way to quickly get an approximate comparison.&lt;/li&gt;
  &lt;li&gt;Nodes are treated as a &lt;strong&gt;blackbox&lt;/strong&gt; for which we only measure bandwidth,
using an external bandwidth monitoring tool.
In other words, we do not consider differences in the size of the envelope (for v1) or the message (for v2).&lt;/li&gt;
  &lt;li&gt;Messages are published at a rate of &lt;strong&gt;50 new messages per second&lt;/strong&gt; to each network,
except where explicitly stated otherwise.&lt;/li&gt;
  &lt;li&gt;Each message propagated in the network carries &lt;strong&gt;8 bytes&lt;/strong&gt; of random payload, which is &lt;strong&gt;encrypted&lt;/strong&gt;.
The same symmetric key cryptographic algorithm (with the same keys) are used in both Waku v1 and v2.&lt;/li&gt;
  &lt;li&gt;Traffic in each network is &lt;strong&gt;generated from 10 nodes&lt;/strong&gt; (randomly-selected) and published in a round-robin fashion to &lt;strong&gt;10 topics&lt;/strong&gt; (content topics for Waku v2).
In practice, we found no significant difference in &lt;em&gt;average&lt;/em&gt; bandwidth usage when tweaking these two parameters (the number of traffic generating nodes and the number of topics).&lt;/li&gt;
  &lt;li&gt;Peers are connected in a decentralized &lt;strong&gt;full mesh topology&lt;/strong&gt;,
i.e. each peer is connected to every other peer in the network.
Waku v1 is expected to flood all messages across all existing connections.
Waku v2 gossipsub will GRAFT some of these connections for full-message peerings,
with the rest being gossip-only peerings.&lt;/li&gt;
  &lt;li&gt;After running each iteration, we &lt;strong&gt;verify that messages propagated to all peers&lt;/strong&gt; (comparing the number of published messages to the metrics logged by each peer).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For Waku v1, nodes are configured as “full” nodes (i.e. with full bloom filter),
while Waku v2 nodes are &lt;code class=&quot;highlighter-rouge&quot;&gt;relay&lt;/code&gt; nodes, all subscribing and publishing to the same PubSub topic.&lt;/p&gt;

&lt;h2 id=&quot;network-size-comparison&quot;&gt;Network size comparison&lt;/h2&gt;

&lt;h3 id=&quot;iteration-1-10-nodes&quot;&gt;Iteration 1: 10 nodes&lt;/h3&gt;

&lt;p&gt;Let’s start with a small network of 10 nodes only and see how Waku v1 bandwidth usage compares to that of Waku v2.
At this small scale we don’t expect to see improved bandwidth usage in Waku v2 over Waku v1,
since all connections, for both Waku v1 and Waku v2, will be full-message connections.
The number of connections is low enough that Waku v2 nodes will likely GRAFT all connections to full-message peerings,
essentially flooding every message on every connection in a similar fashion to Waku v1.
If our expectations are confirmed, it helps validate our methodology,
showing that it gives more or less equivalent results between Waku v1 and Waku v2 networks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/waku1-vs-waku2/waku1-vs-waku2-10-nodes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sure enough, the figure shows that in this small-scale setup,
Waku v1 actually has a lower per-peer bandwidth usage than Waku v2.
One reason for this may be the larger overall proportion of control messages in a gossipsub-routed network such as Waku v2.
These play a larger role when the total network traffic is comparatively low, as in this iteration.
Also note that the average bandwidth remains more or less constant as long as the rate of published messages remains stable.&lt;/p&gt;

&lt;h3 id=&quot;iteration-2-30-nodes&quot;&gt;Iteration 2: 30 nodes&lt;/h3&gt;

&lt;p&gt;Now, let’s run the same scenario for a larger network of highly-connected nodes, this time consisting of 30 nodes.
At this point, the Waku v2 nodes will start pruning some connections to limit the number of full-message peerings (to a maximum of &lt;code class=&quot;highlighter-rouge&quot;&gt;12&lt;/code&gt;),
while the Waku v1 nodes will continue flooding messages to all connected peers.
We therefore expect to see a somewhat improved bandwidth usage in Waku v2 over Waku v1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/waku1-vs-waku2/waku1-vs-waku2-30-nodes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bandwidth usage in Waku v2 has increased only slightly from the smaller network of 10 nodes (hovering between 2000 and 3000 kbps).
This is because there are only a few more full-message peerings than before.
Compare this to the much higher increase in bandwidth usage for Waku v1, which now requires more than 4000 kbps on average.&lt;/p&gt;

&lt;h3 id=&quot;iteration-3-50-nodes&quot;&gt;Iteration 3: 50 nodes&lt;/h3&gt;

&lt;p&gt;For an even larger network of 50 highly connected nodes,
the divergence between Waku v1 and Waku v2 is even larger.
The following figure shows comparative average bandwidth usage for a throughput of 50 messages per second.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/waku1-vs-waku2/waku1-vs-waku2-50-nodes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Average bandwidth usage (for the same message rate) has remained roughly the same for Waku v2 as it was for 30 nodes,
indicating that the number of full-message peerings per node has not increased.&lt;/p&gt;

&lt;h3 id=&quot;iteration-4-85-nodes&quot;&gt;Iteration 4: 85 nodes&lt;/h3&gt;

&lt;p&gt;We already see a clear trend in the bandwidth comparisons above,
so let’s confirm by running the test once more for a network of 85 nodes.
Due to local resource constraints, the effective throughput for Waku v1 falls to below 50 messages per second,
so the v1 results below have been normalized and are therefore approximate.
The local Waku v2 simulation maintains the message throughput rate without any problems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/waku1-vs-waku2/waku1-vs-waku2-85-nodes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;iteration-5-150-nodes&quot;&gt;Iteration 5: 150 nodes&lt;/h3&gt;

&lt;p&gt;Finally, we simulate message propagation in a network of 150 nodes.
Due to local resource constraints, we run this simulation at a lower rate -
35 messages per second -
and for a shorter amount of time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/waku1-vs-waku2/waku1-vs-waku2-150-nodes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how the Waku v1 bandwidth usage is now more than 10 times worse than that of Waku v2.
This is to be expected, as each Waku v1 node will try to flood each new message to 149 other peers,
while the Waku v2 nodes limit their full-message peerings to no more than 12.&lt;/p&gt;

&lt;h3 id=&quot;discussion&quot;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;Let’s summarize average bandwidth growth against network growth for a constant message propagation rate.
Since we are particularly interested in how Waku v1 compares to Waku v2 in terms of bandwidth usage,
the results are normalised to the Waku v2 average bandwidth usage for each network size.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/waku1-vs-waku2/waku1-vs-waku2-overall-network-size.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Extrapolation is a dangerous game,
but it’s safe to deduce that the divergence will only grow for even larger network topologies.
Although control signalling contributes more towards overall bandwidth for Waku v2 networks,
this effect becomes less noticeable for larger networks.
For network segments with more than ~18 densely connected nodes,
the advantage of using Waku v2 above Waku v1 becomes clear.&lt;/p&gt;

&lt;h2 id=&quot;network-traffic-comparison&quot;&gt;Network traffic comparison&lt;/h2&gt;

&lt;p&gt;The analysis above controls the average message rate while network size grows.
In reality, however, active users (and therefore message rates) are likely to grow in conjunction with the network.
This will have an effect on bandwidth for both Waku v1 and Waku v2, though not in equal measure.
Consider the impact of an increasing rate of messages in a network of constant size:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/waku1-vs-waku2/waku1-vs-waku2-overall-message-rate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;rate&lt;/em&gt; of increase in bandwidth for Waku v2 is slower than that for Waku v1 for a corresponding increase in message propagation rate.
In fact, for a network of 30 densely-connected nodes,
if the message propagation rate increases by 1 per second,
Waku v1 requires an increased average bandwidth of almost 70kbps at each node.
A similar traffic increase in Waku v2 requires on average 40kbps more bandwidth per peer, just over half that of Waku v1.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Waku v2 scales significantly better than Waku v1 in terms of average bandwidth usage&lt;/strong&gt;,
especially for densely connected networks.&lt;/li&gt;
  &lt;li&gt;E.g. for a network consisting of &lt;strong&gt;150&lt;/strong&gt; or more densely connected nodes,
Waku v2 provides more than &lt;strong&gt;10x&lt;/strong&gt; better average bandwidth usage rates than Waku v1.&lt;/li&gt;
  &lt;li&gt;As the network continues to scale, both in absolute terms (number of nodes) and in network traffic (message rates) the disparity between Waku v2 and Waku v1 becomes even larger.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future work&lt;/h2&gt;

&lt;p&gt;Now that we’ve confirmed that Waku v2’s bandwidth improvements over its predecessor matches theory,
we can proceed to a more in-depth characterisation of Waku v2’s resource usage.
Some questions that we want to answer include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What proportion of Waku v2’s bandwidth usage is used to propagate &lt;em&gt;payload&lt;/em&gt; versus bandwidth spent on &lt;em&gt;control&lt;/em&gt; messaging to maintain the mesh?&lt;/li&gt;
  &lt;li&gt;To what extent is message latency (time until a message is delivered to its destination) affected by network size and message rate?&lt;/li&gt;
  &lt;li&gt;How &lt;em&gt;reliable&lt;/em&gt; is message delivery in Waku v2 for different network sizes and message rates?&lt;/li&gt;
  &lt;li&gt;What are the resource usage profiles of other Waku v2 protocols (e.g.&lt;a href=&quot;https://rfc.vac.dev/spec/12/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;12/WAKU2-FILTER&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://rfc.vac.dev/spec/19/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;19/WAKU2-LIGHTPUSH&lt;/code&gt;&lt;/a&gt;)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our aim is to get ever closer to a “real world” understanding of Waku v2’s performance characteristics,
identify and fix vulnerabilities
and continually improve the efficiency of our suite of protocols.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://research.protocol.ai/publications/gossipsub-v1.1-evaluation-report/vyzovitis2020.pdf&quot;&gt;Evaluation of GossipSub v1.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vac.dev/fixing-whisper-with-waku&quot;&gt;Fixing Whisper with Waku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackmd.io/@vac/main/%2FYYlZYBCURFyO_ZG1EiteWg#11WAKU2-RELAY-gossipsub&quot;&gt;GossipSub vs flood routing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.techopedia.com/definition/13335/star-topology#:~:text=Star%20topology%20is%20a%20network,known%20as%20a%20star%20network.&quot;&gt;Network topologies: star&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mesh_networking&quot;&gt;Network topologies: mesh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vac.dev/waku-v2-plan&quot;&gt;Waku v2 original plan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>hanno</name></author><category term="research" /><summary type="html">Background</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vac.dev/assets/img/waku1-vs-waku2/waku1-vs-waku2-overall-network-size.png" /><media:content medium="image" url="https://vac.dev/assets/img/waku1-vs-waku2/waku1-vs-waku2-overall-network-size.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[Talk at COSCUP] Vac, Waku v2 and Ethereum Messaging</title><link href="https://vac.dev/waku-v2-ethereum-coscup" rel="alternate" type="text/html" title="[Talk at COSCUP] Vac, Waku v2 and Ethereum Messaging" /><published>2021-08-06T04:00:00+00:00</published><updated>2021-08-06T04:00:00+00:00</updated><id>https://vac.dev/coscup-waku-ethereum</id><content type="html" xml:base="https://vac.dev/waku-v2-ethereum-coscup">&lt;p&gt;&lt;em&gt;This is the English version of a talk originally given in Chinese at COSCUP in Taipei. There is a &lt;a href=&quot;https://www.youtube.com/watch?v=s0ATpQ4_XFc&quot;&gt;video recording&lt;/a&gt; with Chinese and English subtitles.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hi everyone!&lt;/p&gt;

&lt;p&gt;Today I’ll talk to you about Waku v2. What it is, what problems it is solving,
and how it can be useful for things such as messaging in Ethereum. First, let me
start with some brief background.&lt;/p&gt;

&lt;h2 id=&quot;brief-history-and-background&quot;&gt;Brief history and background&lt;/h2&gt;

&lt;p&gt;Back when Ethereum got started, there used to be this concept of the “holy
trinity”. You had Ethereum for compute/consensus, Swarm for storage, and Whisper
for messaging. This is partly where the term Web3 comes from.&lt;/p&gt;

&lt;p&gt;Status started out as an app with the goal of being a window onto Ethereum and
a secure messenger. As one of the few, if not the only, apps using Whisper in
production, not to mention on a mobile phone, we quickly realized there were
problems with the underlying protocols and infrastructure. Protocols such as
Whisper weren’t quite ready for prime time yet when it came to things such as
scalability and working in the real world.&lt;/p&gt;

&lt;p&gt;As we started addressing some of these challenges, and moved from app
developement to focusing on protocols, research and infrastructure, we created
Vac. Vac is an r&amp;amp;d unit doing protocol research focused on creating modular p2p
messaging protocols for private, secure, censorship resistant communication.&lt;/p&gt;

&lt;p&gt;I won’t go into too much detail on the issues with Whisper, if you are
interested in this check out this talk
&lt;a href=&quot;https://www.youtube.com/watch?v=6lLT33tsJjs&quot;&gt;here&lt;/a&gt; or this
&lt;a href=&quot;https://vac.dev/fixing-whisper-with-waku&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a nutshell, we forked Whisper to address immediate shortcomings and this
became Waku v1. Waku v2 is complete re-thought implementation from scratch on top
of libp2p. This will be the subject of today’s talk.&lt;/p&gt;

&lt;h2 id=&quot;waku-v2&quot;&gt;Waku v2&lt;/h2&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;p&gt;Waku v2 is a privacy-preserving peer-to-peer messaging protocol for resource
restricted devices. We can look at Waku v2 as several things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set of protocols&lt;/li&gt;
  &lt;li&gt;Set of implementations&lt;/li&gt;
  &lt;li&gt;Network of nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s first look at what the goals are.&lt;/p&gt;

&lt;h3 id=&quot;goals&quot;&gt;Goals&lt;/h3&gt;

&lt;p&gt;Waku v2 provides a PubSub based messaging protocol with the following
characteristics:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Generalized messaging&lt;/strong&gt;. Applications that require a messaging protocol to
communicate human to human, machine to machine, or a mix.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Peer-to-peer&lt;/strong&gt;. For applications that require a p2p solution.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resource restricted&lt;/strong&gt;. For example, running with limited bandwidth, being
mostly-offline, or in a browser.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Privacy&lt;/strong&gt;. Applications that have privacy requirements, such as pseudonymity,
metadata protection, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And to provide these properties in a modular fashion, where applications can
choose their desired trade-offs.&lt;/p&gt;

&lt;h3 id=&quot;protocols&quot;&gt;Protocols&lt;/h3&gt;

&lt;p&gt;Waku v2 consists of several protocols. Here we highlight a few of the most
important ones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;10/WAKU2 - main specification, details how all the pieces fit together&lt;/li&gt;
  &lt;li&gt;11/RELAY - thin layer on top of GossipSub for message dissemination&lt;/li&gt;
  &lt;li&gt;13/STORE - fetching of historical messages&lt;/li&gt;
  &lt;li&gt;14/MESSAGE - message payload&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the recommended subset for a minimal Waku v2 client.&lt;/p&gt;

&lt;p&gt;In addition to this there are many other types of specifications at various
stages of maturity, such as: content based filtering, bridge mode to Waku v1,
JSON RPC API, zkSNARKS based spam protection with RLN, accounting and
settlements with SWAP, fault-tolerant store nodes, recommendations around topic
usage, and more.&lt;/p&gt;

&lt;p&gt;See https://rfc.vac.dev/ for a full overview.&lt;/p&gt;

&lt;h3 id=&quot;implementations&quot;&gt;Implementations&lt;/h3&gt;

&lt;p&gt;Waku v2 consists of multiple implementations. This allows for client diversity,
makes it easier to strengthen the protocols, and allow people to use Waku v2 in
different contexts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nim-waku - the reference client written in Nim, most full-featured.&lt;/li&gt;
  &lt;li&gt;js-waku - allow usage of Waku v2 from browsers, focus on interacting with dapps.&lt;/li&gt;
  &lt;li&gt;go-waku - subset of Waku v2 to ease integration into the Status app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;testnet-huilong-and-dogfooding&quot;&gt;Testnet Huilong and dogfooding&lt;/h3&gt;

&lt;p&gt;In order to test the protocol we have setup a testnet across all implementations
called Huilong. Yes, that’s the Taipei subway station!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/coscup-waku/huilong.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Among us core devs we have disabled the main #waku Discord channel used for
development, and people run their own node connected to this toy chat application.&lt;/p&gt;

&lt;p&gt;Feel free to join and say hi! Instructions can be found here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/status-im/nim-waku/blob/master/docs/tutorial/chat2.md&quot;&gt;nim-waku chat&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://status-im.github.io/js-waku/&quot;&gt;js-waku chat&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/status-im/go-waku/tree/master/examples/chat2&quot;&gt;go-waku chat&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;research&quot;&gt;Research&lt;/h3&gt;

&lt;p&gt;While Waku v2 is being used today, we are actively researching improvements.
Since the design is modular, we can gracefully introduce new capabilities. Some
of these research areas are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Privacy-preserving spam protection using zkSNARKs and RLN&lt;/li&gt;
  &lt;li&gt;Accounting and settlement of resource usage to incentivize nodes to provide services with SWAP&lt;/li&gt;
  &lt;li&gt;State synchronization for store protocol to make it easier to run a store node without perfect uptime&lt;/li&gt;
  &lt;li&gt;Better node discovery&lt;/li&gt;
  &lt;li&gt;More rigorous privacy analysis&lt;/li&gt;
  &lt;li&gt;Improving interaction with wallets and dapp&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;

&lt;p&gt;Let’s look at where Waku v2 is and can be used.&lt;/p&gt;

&lt;h3 id=&quot;prelude-topics-in-waku-v2&quot;&gt;Prelude: Topics in Waku v2&lt;/h3&gt;

&lt;p&gt;To give some context, there are two different types of topics in Waku v2. One is
a PubSub topic, for routing. The other is a content topic, which is used for
content based filtering. Here’s an example of the default PubSub topic:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/waku/2/default-waku/proto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is recommended as it increases privacy for participants and it is stored by
default, however this is up to the application.&lt;/p&gt;

&lt;p&gt;The second type of topic is a content topic, which is application specific. For
example, here’s the content topic used in our testnet:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/toychat/2/huilong/proto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For more on topics, see https://rfc.vac.dev/spec/23/&lt;/p&gt;

&lt;h3 id=&quot;status-app&quot;&gt;Status app&lt;/h3&gt;

&lt;p&gt;In the Status protocol, content topics - topics in Whisper/Waku v1 - are used for several things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Contact code topic to discover X3DH bundles for perfect forward secrecy
    &lt;ul&gt;
      &lt;li&gt;Partitioned into N (currently 5000) content topics to balance privacy with efficiency&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Public chats correspond to hash of the plaintext name&lt;/li&gt;
  &lt;li&gt;Negotiated topic for 1:1 chat with DHKE derived content topic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See more here https://specs.status.im/spec/10&lt;/p&gt;

&lt;p&gt;Currently, Status app is in the process of migrating to and testing Waku v2.&lt;/p&gt;

&lt;h3 id=&quot;dappconnect-ethereum-messaging&quot;&gt;DappConnect: Ethereum messaging&lt;/h3&gt;

&lt;p&gt;It is easy to think of Waku as being for human messaging, since that’s how it is
primarily used in the Status app, but the goal is to be useful for generalized
messaging, which includes Machine-To-Machine (M2M) messaging.&lt;/p&gt;

&lt;p&gt;Recall the concept of the holy trinity with Ethereum/Swarm/Whisper and Web3 that
we mentioned in the beginning. Messaging can be used as a building block for
dapps, wallets, and users to communicate with each other. It can be used for
things such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multisig and DAO vote transactions only needing one on-chain operation&lt;/li&gt;
  &lt;li&gt;Giving dapps ability to send push notifications to users&lt;/li&gt;
  &lt;li&gt;Giving users ability to directly respond to requests from dapps&lt;/li&gt;
  &lt;li&gt;Decentralized WalletConnect&lt;/li&gt;
  &lt;li&gt;Etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically anything that requires communication and doesn’t have to be on-chain.&lt;/p&gt;

&lt;h3 id=&quot;walletconnect-v2&quot;&gt;WalletConnect v2&lt;/h3&gt;

&lt;p&gt;WalletConnect is an open protocol for connecting dapps to wallets with a QR
code. Version 2 is using Waku v2 as a communication channel to do so in a
decentralized and private fashion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/coscup-waku/walletconnect.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;See for more: https://docs.walletconnect.org/v/2.0/tech-spec&lt;/p&gt;

&lt;p&gt;WalletConnect v2 is currently in late alpha using Waku v2.&lt;/p&gt;

&lt;h3 id=&quot;more-examples&quot;&gt;More examples&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Gasless voting and vote aggregation off-chain&lt;/li&gt;
  &lt;li&gt;Dapp games using Waku as player discovery mechanism&lt;/li&gt;
  &lt;li&gt;Send encrypted message to someone with an Ethereum key&lt;/li&gt;
  &lt;li&gt;
    &lt;Your dapp=&quot;&quot; here=&quot;&quot;&gt;

&lt;/Your&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all things that are in progress / proof of concept stage.&lt;/p&gt;

&lt;h2 id=&quot;contribute&quot;&gt;Contribute&lt;/h2&gt;

&lt;p&gt;We’d love to see contributions of any form!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can play with it here: &lt;a href=&quot;https://github.com/status-im/nim-waku/blob/master/docs/tutorial/chat2.md&quot;&gt;nim-waku chat&lt;/a&gt; (/ &lt;a href=&quot;https://status-im.github.io/js-waku/&quot;&gt;js-waku browser chat&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Use Waku to build a dapp: &lt;a href=&quot;https://status-im.github.io/js-waku/docs/&quot;&gt;js-waku docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Contribute to code: &lt;a href=&quot;https://github.com/status-im/js-waku&quot;&gt;js-waku&lt;/a&gt; / &lt;a href=&quot;https://github.com/status-im/nim-waku&quot;&gt;nim-waku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Contribute to specs: &lt;a href=&quot;https://github.com/vacp2p/rfc&quot;&gt;vacp2p/rfc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;We are hiring: Wallet &amp;amp; Dapp Integration Developer, Distributed Systems Engineer, Protocol Engineer, Protocol Researcher - all &lt;a href=&quot;https://status.im/our_team/jobs.html&quot;&gt;job listings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Join our new &lt;a href=&quot;https://discord.gg/bJCTqS5H&quot;&gt;Discord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this talk we’ve gone over the original vision for Web3 and how Waku came to
be. We’ve also looked at what Waku v2 aims to do. We looked at its protocols,
implementations, the current testnet as well as briefly on some ongoing
research for Vac.&lt;/p&gt;

&lt;p&gt;We’ve also looked at some specific use cases for Waku. First we looked at how
Status uses it with different topics. Then we looked at how it can be useful for
messaging in Ethereum, including for things like WalletConnect.&lt;/p&gt;

&lt;p&gt;I hope this talk gives you a better idea of what Waku is, why it exists, and
that it inspires you to contribute, either to Waku itself or by using it in your
own project!&lt;/p&gt;</content><author><name>oskarth</name></author><category term="research" /><summary type="html">This is the English version of a talk originally given in Chinese at COSCUP in Taipei. There is a video recording with Chinese and English subtitles.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vac.dev/assets/img/coscup-waku/talk.png" /><media:content medium="image" url="https://vac.dev/assets/img/coscup-waku/talk.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Presenting JS-Waku: Waku v2 in the Browser</title><link href="https://vac.dev/presenting-js-waku" rel="alternate" type="text/html" title="Presenting JS-Waku: Waku v2 in the Browser" /><published>2021-06-04T04:00:00+00:00</published><updated>2021-06-04T04:00:00+00:00</updated><id>https://vac.dev/presenting-js-waku</id><content type="html" xml:base="https://vac.dev/presenting-js-waku">&lt;p&gt;For the past 3 months, we have been working on bringing Waku v2 to the browser.
Our aim is to empower dApps with Waku v2, and it led to the creation of a new library.
We believe now is good time to introduce it!&lt;/p&gt;

&lt;h2 id=&quot;waku-v2&quot;&gt;Waku v2&lt;/h2&gt;

&lt;p&gt;First, let’s review what Waku v2 is and what problem it is trying to solve.&lt;/p&gt;

&lt;p&gt;Waku v2 comes from a need to have a more scalable, better optimised solution for the Status app to achieve decentralised
communications on resource restricted devices (i.e., mobile phones).&lt;/p&gt;

&lt;p&gt;The Status chat feature was initially built over Whisper.
However, Whisper has a number of caveats which makes it inefficient for mobile phones.
For example, with Whisper, all devices are receiving all messages which is not ideal for limited data plans.&lt;/p&gt;

&lt;p&gt;To remediate this, a Waku mode (then Waku v1), based on devp2p, was introduced.
To further enable web and restricted resource environments, Waku v2 was created based on libp2p.
The migration of the Status chat feature to Waku v2 is currently in progress.&lt;/p&gt;

&lt;p&gt;We see the need of such solution in the broader Ethereum ecosystem, beyond Status.
This is why we are building Waku v2 as a decentralised communication platform for all to use and build on.
If you want to read more about Waku v2 and what it aims to achieve,
checkout &lt;a href=&quot;/waku-v2-plan&quot;&gt;What’s the Plan for Waku v2?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since last year, we have been busy defining and implementing Waku v2 protocols in &lt;a href=&quot;https://github.com/status-im/nim-waku&quot;&gt;nim-waku&lt;/a&gt;,
from which you can build &lt;a href=&quot;https://github.com/status-im/nim-waku#wakunode&quot;&gt;wakunode2&lt;/a&gt;.
Wakunode2 is an adaptive and modular Waku v2 node,
it allows users to run their own node and use the Waku v2 protocols they need.
The nim-waku project doubles as a library, that can be used to add Waku v2 support to native applications.&lt;/p&gt;

&lt;h2 id=&quot;waku-v2-in-the-browser&quot;&gt;Waku v2 in the browser&lt;/h2&gt;

&lt;p&gt;We believe that dApps and wallets can benefit from the Waku network in several ways.
For some dApps, it makes sense to enable peer-to-peer communications.
For others, machine-to-machine communications would be a great asset.
For example, in the case of a DAO,
Waku could be used for gas-less voting.
Enabling the DAO to notify their users of a new vote,
and users to vote without interacting with the blockchain and spending gas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/status-im/murmur&quot;&gt;Murmur&lt;/a&gt; was the first attempt to bring Whisper to the browser,
acting as a bridge between devp2p and libp2p.
Once Waku v2 was started and there was a native implementation on top of libp2p,
a &lt;a href=&quot;https://github.com/vacp2p/waku-web-chat&quot;&gt;chat POC&lt;/a&gt; was created to demonstrate the potential of Waku v2
in web environment.
It showed how using js-libp2p with few modifications enabled access to the Waku v2 network.
There was still some unresolved challenges.
For example, nim-waku only support TCP connections which are not supported by browser applications.
Hence, to connect to other node, the POC was connecting to a NodeJS proxy application using websockets,
which in turn could connect to wakunode2 via TCP.&lt;/p&gt;

&lt;p&gt;However, to enable dApp and Wallet developers to easily integrate Waku in their product,
we need to give them a library that is easy to use and works out of the box:
introducing &lt;a href=&quot;https://github.com/status-im/js-waku&quot;&gt;JS-Waku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;JS-Waku is a JavaScript library that allows your dApp, wallet or other web app to interact with the Waku v2 network.
It is available right now on &lt;a href=&quot;https://www.npmjs.com/package/js-waku&quot;&gt;npm&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install js-waku&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As it is written in TypeScript, types are included in the npm package to allow easy integration with TypeScript, ClojureScript and other typed languages that compile to JavaScript.&lt;/p&gt;

&lt;p&gt;Key Waku v2 protocols are already available:
&lt;a href=&quot;https://rfc.vac.dev/spec/14/&quot;&gt;message&lt;/a&gt;, &lt;a href=&quot;https://rfc.vac.dev/spec/13/&quot;&gt;store&lt;/a&gt;, &lt;a href=&quot;https://rfc.vac.dev/spec/11/&quot;&gt;relay&lt;/a&gt; and &lt;a href=&quot;https://rfc.vac.dev/spec/19/&quot;&gt;light push&lt;/a&gt;,
enabling your dApp to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Send and receive near-instant messages on the Waku network (relay),&lt;/li&gt;
  &lt;li&gt;Query nodes for messages that may have been missed, e.g. due to poor cellular network (store),&lt;/li&gt;
  &lt;li&gt;Send messages with confirmations (light push).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JS-Waku needs to operate in the same context from which Waku v2 was born:
a restricted environment were connectivity or uptime are not guaranteed;
JS-Waku brings Waku v2 to the browser.&lt;/p&gt;

&lt;h2 id=&quot;achievements-so-far&quot;&gt;Achievements so far&lt;/h2&gt;

&lt;p&gt;We focused the past month on developing a &lt;a href=&quot;https://status-im.github.io/js-waku/&quot;&gt;ReactJS Chat App&lt;/a&gt;.
The aim was to create enough building blocks in JS-Waku to enable this showcase web app that
we now &lt;a href=&quot;https://github.com/status-im/nim-waku/issues/399&quot;&gt;use for dogfooding&lt;/a&gt; purposes.&lt;/p&gt;

&lt;p&gt;Most of the effort was on getting familiar with the &lt;a href=&quot;https://github.com/libp2p/js-libp2p&quot;&gt;js-libp2p&lt;/a&gt; library
that we heavily rely on.
JS-Waku is the second implementation of Waku v2 protocol,
so a lot of effort on interoperability was needed.
For example, to ensure compatibility with the nim-waku reference implementation,
we run our &lt;a href=&quot;https://github.com/status-im/js-waku/blob/90c90dea11dfd1277f530cf5d683fb92992fe141/src/lib/waku_relay/index.spec.ts#L137&quot;&gt;tests against wakunode2&lt;/a&gt; as part of the CI.&lt;/p&gt;

&lt;p&gt;This interoperability effort helped solidify the current Waku v2 specifications:
By clarifying the usage of topics
(&lt;a href=&quot;https://github.com/vacp2p/rfc/issues/327&quot;&gt;#327&lt;/a&gt;, &lt;a href=&quot;https://github.com/vacp2p/rfc/pull/383&quot;&gt;#383&lt;/a&gt;),
fix discrepancies between specs and nim-waku
(&lt;a href=&quot;https://github.com/status-im/nim-waku/issues/418&quot;&gt;#418&lt;/a&gt;, &lt;a href=&quot;https://github.com/status-im/nim-waku/issues/419&quot;&gt;#419&lt;/a&gt;)
and fix small nim-waku &amp;amp; nim-libp2p bugs
(&lt;a href=&quot;https://github.com/status-im/nim-waku/issues/411&quot;&gt;#411&lt;/a&gt;, &lt;a href=&quot;https://github.com/status-im/nim-waku/issues/439&quot;&gt;#439&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To fully access the waku network, JS-Waku needs to enable web apps to connect to nim-waku nodes.
A standard way to do so is using secure websockets as it is not possible to connect directly to a TCP port from the browser.
Unfortunately websocket support is not yet available in &lt;a href=&quot;https://github.com/status-im/nim-libp2p/issues/407&quot;&gt;nim-libp2p&lt;/a&gt; so 
we ended up deploying &lt;a href=&quot;https://github.com/novnc/websockify&quot;&gt;websockify&lt;/a&gt; alongside wakunode2 instances.&lt;/p&gt;

&lt;p&gt;As we built the &lt;a href=&quot;https://github.com/status-im/js-waku/tree/main/examples/web-chat&quot;&gt;web chat app&lt;/a&gt;,
we were able to fine tune the API to provide a simple and succinct interface.
You can start a node, connect to other nodes and send a message in less than ten lines of code:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Waku&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;js-waku&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waku&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Waku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getStatusFleetNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WakuMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromUtf8String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Here is a message!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/my-cool-app/1/my-use-case/proto&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have also put a bounty at &lt;a href=&quot;https://0xhack.dev/&quot;&gt;0xHack&lt;/a&gt; for using JS-Waku
and running a &lt;a href=&quot;https://www.youtube.com/watch?v=l77j0VX75QE&quot;&gt;workshop&lt;/a&gt;.
We were thrilled to have a couple of hackers create new software using our libraries.
One of the projects aimed to create a decentralised, end-to-end encrypted messenger app,
similar to what the &lt;a href=&quot;https://rfc.vac.dev/spec/20/&quot;&gt;ETH-DM&lt;/a&gt; protocol aims to achieve.
Another project was a decentralised Twitter platform.
Such projects allow us to prioritize the work on JS-Waku and understand how DevEx can be improved.&lt;/p&gt;

&lt;p&gt;As more developers use JS-Waku, we will evolve the API to allow for more custom and fine-tune usage of the network
while preserving this out of the box experience.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;Next, we are directing our attention towards &lt;a href=&quot;https://github.com/status-im/js-waku/issues/68&quot;&gt;Developer Experience&lt;/a&gt;.
We already have &lt;a href=&quot;https://www.npmjs.com/package/js-waku&quot;&gt;documentation&lt;/a&gt; available but we want to provide more:
&lt;a href=&quot;https://github.com/status-im/js-waku/issues/56&quot;&gt;Tutorials&lt;/a&gt;, various examples
and showing how &lt;a href=&quot;https://github.com/status-im/js-waku/issues/72&quot;&gt;JS-Waku can be used with Web3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By prioritizing DevEx we aim to enable JS-Waku integration in dApps and wallets.
We think JS-Waku builds a strong case for machine-to-machine (M2M) communications.
The first use cases we are looking into are dApp notifications:
Enabling dApp to notify their user directly in their wallets!
Leveraging Waku as a decentralised infrastructure and standard so that users do not have to open their dApp to be notified
of events such as DAO voting.&lt;/p&gt;

&lt;p&gt;We already have some POC in the pipeline to enable voting and polling on the Waku network,
allowing users to save gas by &lt;strong&gt;not&lt;/strong&gt; broadcasting each individual vote on the blockchain.&lt;/p&gt;

&lt;p&gt;To facilitate said applications, we are looking at improving integration with Web3 providers by providing examples
of signing, validating, encrypting and decrypting messages using Web3.
Waku is privacy conscious, so we will also provide signature and encryption examples decoupled from users’ Ethereum identity.&lt;/p&gt;

&lt;p&gt;As you can read, we have grand plans for JS-Waku and Waku v2.
There is a lot to do, and we would love some help so feel free to
check out the new role in our team:
&lt;a href=&quot;https://status.im/our_team/jobs.html?gh_jid=3157894&quot;&gt;js-waku: Wallet &amp;amp; Dapp Integration Developer&lt;/a&gt;.
We also have a number of &lt;a href=&quot;https://status.im/our_team/jobs.html&quot;&gt;positions&lt;/a&gt; open to work on Waku protocol and nim-waku.&lt;/p&gt;

&lt;p&gt;If you are as excited as us by JS-Waku, why not build a dApp with it?
You can find documentation on the &lt;a href=&quot;https://www.npmjs.com/package/js-waku&quot;&gt;npmjs page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whether you are a developer, you can come chat with us using &lt;a href=&quot;https://status-im.github.io/js-waku/&quot;&gt;WakuJS Web Chat&lt;/a&gt;
or &lt;a href=&quot;https://github.com/status-im/nim-waku/blob/master/docs/tutorial/chat2.md&quot;&gt;chat2&lt;/a&gt;.
You can get support in #dappconnect-support on &lt;a href=&quot;https://discord.gg/j5pGbn7MHZ&quot;&gt;Vac Discord&lt;/a&gt; or &lt;a href=&quot;https://t.me/dappconnectsupport&quot;&gt;Telegram&lt;/a&gt;.
If you have any ideas on how Waku could enable a specific dapp or use case, do share, we are always keen to hear it.&lt;/p&gt;</content><author><name>franck</name></author><category term="platform" /><summary type="html">For the past 3 months, we have been working on bringing Waku v2 to the browser. Our aim is to empower dApps with Waku v2, and it led to the creation of a new library. We believe now is good time to introduce it!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vac.dev/assets/img/js-waku-gist.png" /><media:content medium="image" url="https://vac.dev/assets/img/js-waku-gist.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Privacy-preserving p2p economic spam protection in Waku v2</title><link href="https://vac.dev/rln-relay" rel="alternate" type="text/html" title="Privacy-preserving p2p economic spam protection in Waku v2" /><published>2021-03-05T04:00:00+00:00</published><updated>2021-03-05T04:00:00+00:00</updated><id>https://vac.dev/rln-relay</id><content type="html" xml:base="https://vac.dev/rln-relay">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This post is going to give you an overview of how spam protection can be achieved in Waku Relay protocol&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; through Rate-Limiting Nullifiers&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; or RLN for short.&lt;/p&gt;

&lt;p&gt;Let me give a little background about Waku(v2)&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. Waku is a privacy-preserving peer-to-peer (p2p) messaging protocol for resource-restricted devices. Being p2p means that Waku relies on &lt;strong&gt;No&lt;/strong&gt; central server. Instead, peers collaboratively deliver messages in the network. Waku uses GossipSub&lt;sup id=&quot;fnref:16&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:16&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; as the underlying routing protocol (as of the writeup of this post). At a high level, GossipSub is based on publisher-subscriber architecture. That is, &lt;em&gt;peers, congregate around topics they are interested in and can send messages to topics. Each message gets delivered to all peers subscribed to the topic&lt;/em&gt;. In GossipSub, a peer has a constant number of direct connections/neighbors. In order to publish a message, the author forwards its message to a subset of neighbors. The neighbors proceed similarly till the message gets propagated in the network of the subscribed peers. The message publishing and routing procedures are part of the Waku Relay&lt;sup id=&quot;fnref:17&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:17&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; protocol.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;../assets/img/rln-relay/rln-relay-overview.png&quot; width=&quot;200%&quot; /&gt;
    &lt;br /&gt;
    Figure 1: An overview of privacy-preserving p2p economic spam protection in Waku v2 RLN-Relay protocol.
&lt;/p&gt;

&lt;h2 id=&quot;what-do-we-mean-by-spamming&quot;&gt;What do we mean by spamming?&lt;/h2&gt;
&lt;p&gt;In centralized messaging systems, a spammer usually indicates an entity that uses the messaging system to send an unsolicited message (spam) to large numbers of recipients. However, in Waku with a p2p architecture, spam messages not only affect the recipients but also all the other peers involved in the routing process as they have to spend their computational power/bandwidth/storage capacity on processing spam messages. As such, we define a spammer as an entity that uses the messaging system to publish a large number of messages in a short amount of time. The messages issued in this way are called spam. In this definition, we disregard the intention of the spammer as well as the content of the message and the number of recipients.&lt;/p&gt;

&lt;h2 id=&quot;possible-solutions&quot;&gt;Possible Solutions&lt;/h2&gt;
&lt;p&gt;Has the spamming issue been addressed before? Of course yes! Here is an overview of the spam protection techniques with their trade-offs and use-cases. In this overview, we distinguish between protection techniques that are targeted for centralized messaging systems and those for p2p architectures.&lt;/p&gt;

&lt;h3 id=&quot;centralized-messaging-systems&quot;&gt;Centralized Messaging Systems&lt;/h3&gt;
&lt;p&gt;In traditional centralized messaging systems, spam usually signifies unsolicited messages sent in bulk or messages with malicious content like malware. Protection mechanisms include&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;authentication through some piece of personally identifiable information e.g., phone number&lt;/li&gt;
  &lt;li&gt;checksum-based filtering to protect against messages sent in bulk&lt;/li&gt;
  &lt;li&gt;challenge-response systems&lt;/li&gt;
  &lt;li&gt;content filtering on the server or via a proxy application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These methods exploit the fact that the messaging system is centralized and a global view of the users’ activities is available based on which spamming patterns can be extracted and defeated accordingly.  Moreover, users are associated with an identifier e.g., a username which enables the server to profile each user e.g., to detect suspicious behavior like spamming. Such profiling possibility is against the user’s anonymity and privacy.&lt;/p&gt;

&lt;p&gt;Among the techniques enumerated above, authentication through phone numbers is a some-what economic-incentive measure as providing multiple valid phone numbers will be expensive for the attacker. Notice that while using an expensive authentication method can reduce the number of accounts owned by a single spammer, cannot address the spam issue entirely. This is because the spammer can still send bulk messages through one single account. For this approach to be effective, a centralized mediator is essential. That is why such a solution would not fit the p2p environments where no centralized control exists.&lt;/p&gt;

&lt;h3 id=&quot;p2p-systems&quot;&gt;P2P Systems&lt;/h3&gt;
&lt;p&gt;What about spam prevention in p2p messaging platforms? There are two techniques, namely &lt;em&gt;Proof of Work&lt;/em&gt;&lt;sup id=&quot;fnref:8&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;  deployed by Whisper&lt;sup id=&quot;fnref:9&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:9&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; and &lt;em&gt;Peer scoring&lt;/em&gt;&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; method (namely reputation-based approach) adopted by LibP2P. However, each of these solutions has its own shortcomings for real-life use-cases as explained below.&lt;/p&gt;

&lt;h4 id=&quot;proof-of-work&quot;&gt;Proof of work&lt;/h4&gt;
&lt;p&gt;The idea behind the Proof Of Work i.e., POW&lt;sup id=&quot;fnref:8:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; is to make messaging a computationally costly operation hence lowering the messaging rate of &lt;strong&gt;all&lt;/strong&gt; the peers including the spammers. In specific, the message publisher has to solve a puzzle and the puzzle is to find a nonce such that the hash of the message concatenated with the nonce has at least z leading zeros. z is known as the difficulty of the puzzle. Since the hash function is one-way, peers have to brute-force to find a nonce. Hashing is a computationally-heavy operation so is the brute-force. While solving the puzzle is computationally expensive, it is comparatively cheap to verify the solution.&lt;/p&gt;

&lt;p&gt;POW is also used as the underlying mining algorithm in Ethereum and Bitcoin blockchain. There, the goal is to contain the mining speed and allow the decentralized network to come to a consensus, or agree on things like account balances and the order of transactions.&lt;/p&gt;

&lt;p&gt;While the use of POW makes perfect sense in Ethereum / Bitcoin blockchain, it shows practical issues in heterogeneous p2p messaging systems with resource-restricted peers. Some peers won’t be able to carry the designated computation and will be effectively excluded. Such exclusion showed to be practically an issue in applications like Status, which used to rely on POW for spam-protection, to the extent that the difficulty level had to be set close to zero.&lt;/p&gt;

&lt;h4 id=&quot;peer-scoring&quot;&gt;Peer Scoring&lt;/h4&gt;
&lt;p&gt;The peer scoring method&lt;sup id=&quot;fnref:6:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; that is utilized by libp2p is to limit the number of messages issued by a peer in connection to another peer. That is each peer monitors all the peers to which it is directly connected and adjusts their messaging quota i.e., to route or not route their messages depending on their past activities. For example, if a peer detects its neighbor is sending more than x messages per month, can drop its quota to z.x where z is less than one.  The shortcoming of this solution is that scoring is based on peers’ local observations and the concept of the score is defined in relation to one single peer. This leaves room for an attack where a spammer can make connections to k peers in the system and publishes k.(x-1)  messages by exploiting all of its k connections. Another attack scenario is through botnets consisting of a large number of e.g., a million bots. The attacker rents a botnet and inserts each of them as a legitimate peer to the network and each can publish x-1 messages per month&lt;sup id=&quot;fnref:7&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h4 id=&quot;economic-incentive-spam-protection&quot;&gt;Economic-Incentive Spam protection&lt;/h4&gt;
&lt;p&gt;Is this the end of our spam-protection journey? Shall we simply give up and leave spammers be? Certainly not!
Waku RLN-Relay gives us a p2p spam-protection method which:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;suits &lt;strong&gt;p2p&lt;/strong&gt; systems and does not rely on any central entity.&lt;/li&gt;
  &lt;li&gt;is &lt;strong&gt;efficient&lt;/strong&gt;  i.e., with no unreasonable computational, storage, memory, and bandwidth requirement! as such, it fits the network of &lt;strong&gt;heterogeneous&lt;/strong&gt; peers.&lt;/li&gt;
  &lt;li&gt;respects users &lt;strong&gt;privacy&lt;/strong&gt; unlike reputation-based and centralized methods.&lt;/li&gt;
  &lt;li&gt;deploys &lt;strong&gt;economic-incentives&lt;/strong&gt; to contain spammers’ activity. Namely, there is a financial sacrifice for those who want to spam the system. How? follow along …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We devise a general rule to save everyone’s life and that is&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No one can publish more than M messages per epoch without being financially charged!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We set M to 1 for now, but this can be any arbitrary value. You may be thinking “This is too restrictive! Only one per epoch?”. Don’t worry, we set the epoch to a reasonable value so that it does not slow down the communication of innocent users but will make the life of spammers harder! Epoch here can be every second, as defined by UTC date-time +-20s.&lt;/p&gt;

&lt;p&gt;The remainder of this post is all about the story of how to enforce this limit on each user’s messaging rate as well as how to impose the financial cost when the limit gets violated.  This brings us to the Rate Limiting Nullifiers and how we integrate this technique into Waku v2 (in specific the Waku Relay protocol) to protect our valuable users against spammers.&lt;/p&gt;

&lt;h1 id=&quot;technical-terms&quot;&gt;Technical Terms&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Zero-knowledge proof&lt;/strong&gt;: Zero-knowledge proof (ZKP)&lt;sup id=&quot;fnref:14&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:14&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt; allows a &lt;em&gt;prover&lt;/em&gt; to show a &lt;em&gt;verifier&lt;/em&gt; that they know something, without revealing what that something is. This means you can do the trust-minimized computation that is also privacy-preserving. As a basic example, instead of showing your ID when going to a bar you simply give them proof that you are over 18, without showing the doorman your id. In this write-up, by ZKP we essentially mean zkSNARK&lt;sup id=&quot;fnref:15&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:15&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt; which is one of the many types of ZKPs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Threshold Secret Sharing Scheme&lt;/strong&gt;: (m,n) Threshold secret-sharing is a method by which you can split a secret value s into n pieces in a way that the secret s can be reconstructed by having m pieces (m &amp;lt;= n). The economic-incentive spam protection utilizes a (2,n) secret sharing realized by Shamir Secret Sharing Scheme&lt;sup id=&quot;fnref:13&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:13&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;13&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h1 id=&quot;overview-economic-incentive-spam-protection-through-rate-limiting-nullifiers&quot;&gt;Overview: Economic-Incentive Spam protection through Rate Limiting Nullifiers&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: We started the idea of economic-incentive spam protection more than a year ago and conducted a feasibility study to identify blockers and unknowns. The results are published in our prior &lt;a href=&quot;https://vac.dev/feasibility-semaphore-rate-limiting-zksnarks&quot;&gt;post&lt;/a&gt;. Since then major progress has been made and the prior identified blockers that are listed below are now addressed. Kudos to &lt;a href=&quot;https://github.com/barryWhiteHat&quot;&gt;Barry WhiteHat&lt;/a&gt;, &lt;a href=&quot;https://github.com/kilic&quot;&gt;Onur Kilic&lt;/a&gt;, &lt;a href=&quot;https://github.com/weijiekoh/perpetualpowersoftau&quot;&gt;Koh Wei Jie&lt;/a&gt; for all of their hard work, research, and development which made this progress possible.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the proof time&lt;sup id=&quot;fnref:22&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:22&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;14&lt;/a&gt;&lt;/sup&gt; which was initially in the order of minutes ~10 mins and now is almost 0.5 seconds&lt;/li&gt;
  &lt;li&gt;the prover key size&lt;sup id=&quot;fnref:21&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:21&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;15&lt;/a&gt;&lt;/sup&gt; which was initially ~110MB and now is ~3.9MB&lt;/li&gt;
  &lt;li&gt;the lack of Shamir logic&lt;sup id=&quot;fnref:19&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:19&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;16&lt;/a&gt;&lt;/sup&gt; which is now implemented and part of the RLN repository&lt;sup id=&quot;fnref:4:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;the concern regarding the potential multi-party computation for the trusted setup of zkSNARKs which got resolved&lt;sup id=&quot;fnref:20&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:20&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;17&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;the lack of end-to-end integration that now we made it possible, have it implemented, and are going to present it in this post. New blockers are also sorted out during the e2e integration which we will discuss in the &lt;a href=&quot;#feasibility-and-open-issues&quot;&gt;Feasibility and Open Issues&lt;/a&gt; section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you have more context, let’s see how the final solution works. The fundamental point is to make it economically costly to send more than your share of messages and to do so in a privacy-preserving and e2e fashion. To do that we have the following components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1- &lt;strong&gt;Group&lt;/strong&gt;: We manage all the peers inside a large group (later we can split peers into smaller groups, but for now consider only one). The group management is done via a smart contract which is devised for this purpose and is deployed on the Ethereum blockchain.&lt;/li&gt;
  &lt;li&gt;2- &lt;strong&gt;Membership&lt;/strong&gt;: To be able to send messages and in specific for the published messages to get routed by all the peers, publishing peers have to register to the group. Membership involves setting up public and private key pairs (think of it as the username and password). The private key remains at the user side but the public key becomes a part of the group information on the contract (publicly available) and everyone has access to it. Public keys are not human-generated (like usernames) and instead they are random numbers, as such, they do not reveal any information about the owner (think of public keys as pseudonyms). Registration is mandatory for the users who want to publish a message, however, users who only want to listen to the messages are more than welcome and do not have to register in the group.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Membership fee&lt;/strong&gt;: Membership is not for free! each peer has to lock a certain amount of funds during the registration (this means peers have to have an Ethereum account with sufficient balance for this sake). This fund is safely stored on the contract and remains intact unless the peer attempts to break the rules and publish more than one message per epoch.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Zero-knowledge Proof of membership&lt;/strong&gt;: Do you want your message to get routed to its destination, fine, but you have to prove that you are a member of the group (sorry, no one can escape the registration phase!). Now, you may be thinking that should I attach my public key to my message to prove my membership? Absolutely Not! we said that our solution respects privacy! membership proofs are done in a zero-knowledge manner that is each message will carry cryptographic proof asserting that “the message is generated by one of the current members of the group”, so your identity remains private and your anonymity is preserved!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Slashing through secret sharing&lt;/strong&gt;: Till now it does not seem like we can catch spammers, right? yes, you are right! now comes the exciting part, detecting spammers and slashing them. The core idea behind the slashing is that each publishing peer (not routing peers!) has to integrate a secret share of its private key inside the message. The secret share is deterministically computed over the private key and the current epoch. The content of this share is harmless for the peer’s privacy (it looks random) unless the peer attempts to publish more than one message in the same epoch hence disclosing more than one secret share of its private key. Indeed two distinct shares of the private key under the same epoch are enough to reconstruct the entire private key. Then what should you do with the recovered private key? hurry up! go to the contract and withdraw the private key and claim its fund and get rich!! Are you thinking what if spammers attach junk values instead of valid secret shares? Of course, that wouldn’t be cool! so, there is a zero-knowledge proof for this sake as well where the publishing peer has to prove that the secret shares are generated correctly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A high-level overview of the economic spam protection is shown in Figure 1.&lt;/p&gt;

&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;/h1&gt;
&lt;p&gt;In this section, we describe the flow of the economic-incentive spam detection mechanism from the viewpoint of a single peer. An overview of this flow is provided in Figure 3.&lt;/p&gt;

&lt;h2 id=&quot;setup-and-registration&quot;&gt;Setup and Registration&lt;/h2&gt;
&lt;p&gt;A peer willing to publish a message is required to register. Registration is moderated through a smart contract deployed on the Ethereum blockchain. The state of the contract contains the list of registered members’ public keys. An overview of registration is illustrated in Figure 2.&lt;/p&gt;

&lt;p&gt;For the registration, a peer creates a transaction that sends x amount of Ether to the contract. The peer who has the “private key” &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; associated with that deposit would be able to withdraw x Ether by providing valid proof. Note that  &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; is initially only known by the owning peer however it may get exposed to other peers in case the owner attempts spamming the system i.e., sending more than one message per epoch.
The following relation holds between the &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pk&lt;/code&gt; i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;pk = H(sk)&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt; denotes a hash function.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;../assets/img/rln-relay/rln-relay.png&quot; /&gt;
    &lt;br /&gt;
    Figure 2: Registration.
&lt;/p&gt;

&lt;h2 id=&quot;maintaining-the-membership-merkle-tree&quot;&gt;Maintaining the membership Merkle Tree&lt;/h2&gt;
&lt;p&gt;The ZKP of membership that we mentioned before relies on the representation of the entire group as a &lt;a href=&quot;&quot;&gt;Merkle Tree&lt;/a&gt;. The tree construction and maintenance is delegated to the peers (the initial idea was to keep the tree on the chain as part of the contract, however, the cost associated with member deletion and insertion was high and unreasonable, please see &lt;a href=&quot;#Feasibility-and-Open-Issues&quot;&gt;Feasibility and Open Issues&lt;/a&gt; for more details). As such, each peer needs to build the tree locally and sync itself with the contract updates (peer insertion and deletion) to mirror them on its tree.
Two pieces of information of the tree are important as they enable peers to generate zero-knowledge proofs. One is the root of the tree and the other is the membership proof (or the authentication path). The tree root is public information whereas the membership proof is private data (or more precisely the index of the peer in the tree).&lt;/p&gt;

&lt;h2 id=&quot;publishing&quot;&gt;Publishing&lt;/h2&gt;
&lt;p&gt;In order to publish at a given epoch, each message must carry a proof i.e., a zero-knowledge proof signifying that the publishing peer is a  registered member, and has not exceeded the messaging rate at the given epoch.&lt;/p&gt;

&lt;p&gt;Recall that the enforcement of the messaging rate was through associating a secret shared version of the peer’s &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; into the message together with a ZKP that the secret shares are constructed correctly. As for the secret sharing part, the peer generates the following data:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shareX&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shareY&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nullifier&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The pair (&lt;code class=&quot;highlighter-rouge&quot;&gt;shareX&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;shareY&lt;/code&gt;)  is the secret shared version of &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; that are generated using Shamir secret sharing scheme. Having two such pairs for an identical &lt;code class=&quot;highlighter-rouge&quot;&gt;nullifier&lt;/code&gt; results in full disclosure of peer’s &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; and hence burning the associated deposit. Note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;nullifier&lt;/code&gt; is a deterministic value derived from &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;epoch&lt;/code&gt; therefore any two messages issued by the same peer (i.e., using the same &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt;) for the same &lt;code class=&quot;highlighter-rouge&quot;&gt;epoch&lt;/code&gt; are guaranteed to have identical &lt;code class=&quot;highlighter-rouge&quot;&gt;nullifier&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Finally, the peer generates a zero-knowledge proof  &lt;code class=&quot;highlighter-rouge&quot;&gt;zkProof&lt;/code&gt;  asserting the membership of the peer in the group and the correctness of the attached secret share (&lt;code class=&quot;highlighter-rouge&quot;&gt;shareX&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;shareY&lt;/code&gt;) and the &lt;code class=&quot;highlighter-rouge&quot;&gt;nullifier&lt;/code&gt;. In order to generate a valid proof, the peer needs to have two private inputs i.e., its &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; and its authentication path. Other inputs are the tree root, epoch, and the content of the message.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Privacy Hint:&lt;/strong&gt; Note that the authentication path of each peer depends on the recent list of members (hence changes when new peers register or leave). As such, it is recommended (and necessary for privacy/anonymity) that the publisher updates her authentication path based on the latest status of the group and attempts the proof using the updated version.&lt;/p&gt;

&lt;p&gt;An overview of the publishing procedure is provided in Figure 3.&lt;/p&gt;

&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;/h2&gt;
&lt;p&gt;Upon the receipt of a message, the routing peer needs to decide whether to route it or not. This decision relies on the following factors:
1) If the epoch value attached to the message has a non-reasonable gap with the routing peer’s current epoch then the message must be dropped (this is to prevent a newly registered peer spamming the system by messaging for all the past epochs). 
2) The message MUST contain valid proof that gets verified by the routing peer. 
If the preceding checks are passed successfully, then the message is relayed. In case of an invalid proof, the message is dropped. If spamming is detected, the publishing peer gets slashed (see &lt;a href=&quot;#Spam-Detection-and-Slashing&quot;&gt;Spam Detection and Slashing&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;An overview of the routing procedure is provided in Figure 3.&lt;/p&gt;

&lt;h3 id=&quot;spam-detection-and-slashing&quot;&gt;Spam Detection and Slashing&lt;/h3&gt;
&lt;p&gt;In order to enable local spam detection and slashing, routing peers MUST record the &lt;code class=&quot;highlighter-rouge&quot;&gt;nullifier&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;shareX&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;shareY&lt;/code&gt; of any incoming message conditioned that it is not spam and has valid proof. To do so, the peer should follow the following steps.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The routing peer first verifies the &lt;code class=&quot;highlighter-rouge&quot;&gt;zkProof&lt;/code&gt; and drops the message if not verified.&lt;/li&gt;
  &lt;li&gt;Otherwise, it checks whether a message with an identical &lt;code class=&quot;highlighter-rouge&quot;&gt;nullifier&lt;/code&gt; has already been relayed.
    &lt;ul&gt;
      &lt;li&gt;a) If such message exists and its &lt;code class=&quot;highlighter-rouge&quot;&gt;shareX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;shareY&lt;/code&gt; components are different from the incoming message, then slashing takes place (if the &lt;code class=&quot;highlighter-rouge&quot;&gt;shareX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;shareY&lt;/code&gt; fields of the previously relayed message is identical to the incoming message, then the message is a duplicate and shall be dropped).&lt;/li&gt;
      &lt;li&gt;b) If none found, then the message gets relayed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An overview of the slashing procedure is provided in Figure 3.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;../assets/img/rln-relay/rln-message-verification.png&quot; /&gt;
    &lt;br /&gt;
    Figure 3: Publishing, Routing and Slashing workflow.
&lt;/p&gt;

&lt;h1 id=&quot;feasibility-and-open-issues&quot;&gt;Feasibility and Open Issues&lt;/h1&gt;
&lt;p&gt;We’ve come a long way since a year ago, blockers resolved, now we have implemented it end-to-end. We learned lot and could identify further issues and unknowns some of which are blocking getting to production. The summary of the identified issues  are presented below.&lt;/p&gt;

&lt;h2 id=&quot;storage-overhead-per-peer&quot;&gt;Storage overhead per peer&lt;/h2&gt;
&lt;p&gt;Currently, peers are supposed to maintain the entire tree locally and it imposes storage overhead which is linear in the size of the group (see this &lt;a href=&quot;https://github.com/vacp2p/research/issues/57&quot;&gt;issue&lt;/a&gt;&lt;sup id=&quot;fnref:11&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:11&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;18&lt;/a&gt;&lt;/sup&gt; for more details). One way to cope with this is to use the light-node and full-node paradigm in which only a subset of peers who are more resourceful retain the tree whereas the light nodes obtain the necessary information by interacting with the full nodes. Another way to approach this problem is through a more storage efficient method (as described in this research issue&lt;sup id=&quot;fnref:12&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:12&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;19&lt;/a&gt;&lt;/sup&gt;) where peers store a partial view of the tree instead of the entire tree. Keeping the partial view lowers the storage complexity to O(log(N)) where N is the size of the group. There are still unknown unknowns to this solution, as such, it must be studied further to become fully functional.&lt;/p&gt;

&lt;h2 id=&quot;cost-effective-way-of-member-insertion-and-deletion&quot;&gt;Cost-effective way of member insertion and deletion&lt;/h2&gt;
&lt;p&gt;Currently, the cost associated with RLN-Relay membership is around 30 USD&lt;sup id=&quot;fnref:10&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;20&lt;/a&gt;&lt;/sup&gt;. We aim at finding a more cost-effective approach. Please feel free to share with us your solution ideas in this regard in this &lt;a href=&quot;https://github.com/vacp2p/research/issues/56&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;exceeding-the-messaging-rate-via-multiple-registrations&quot;&gt;Exceeding the messaging rate via multiple registrations&lt;/h2&gt;
&lt;p&gt;While the economic-incentive solution has an economic incentive to discourage spamming, we should note that there is still &lt;strong&gt;expensive attack(s)&lt;/strong&gt;&lt;sup id=&quot;fnref:23&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:23&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;21&lt;/a&gt;&lt;/sup&gt; that a spammer can launch to break the messaging rate limit. That is, the attacker can pay for multiple legit registrations e.g., k, hence being able to publish k messages per epoch. We believe that the higher the membership fee is, the less probable would be such an attack, hence a stronger level of spam-protection can be achieved. Following this argument, the high fee associated with the membership (which we listed above as an open problem) can indeed be contributing to a better protection level.&lt;/p&gt;

&lt;h1 id=&quot;conclusion-and-future-steps&quot;&gt;Conclusion and Future Steps&lt;/h1&gt;
&lt;p&gt;As discussed in this post, Waku RLN Relay can achieve a privacy-preserving economic spam protection through rate-limiting nullifiers. The idea is to financially discourage peers from publishing more than one message per epoch. In specific, exceeding the messaging rate results in a financial charge. Those who violate this rule are called spammers and their messages are spam. The identification of spammers does not rely on any central entity. Also, the financial punishment of spammers is cryptographically guaranteed. 
In this solution, privacy is guaranteed since: 1) Peers do not have to disclose any piece of personally identifiable information in any phase i.e., neither in the registration nor in the messaging phase 2) Peers can prove that they have not exceeded the messaging rate in a zero-knowledge manner and without leaving any trace to their membership accounts. 
Furthermore, all the computations are light hence this solution fits the heterogenous p2p messaging system. Note that  the zero-knowledge proof parts are handled through zkSNARKs  and  the benchmarking result can be found in the RLN benchmark report&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;22&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Future steps&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;We are still at the PoC level, and the development is in progress. As our future steps,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;we would like to evaluate the running time associated with the Merkle tree operations. Indeed, the need to locally store Merkle tree on each peer was one of the unknowns discovered during this PoC and yet the concrete benchmarking result in this regard is not available.&lt;/li&gt;
  &lt;li&gt;We would also like to pursue our storage-efficient Merkle Tree maintenance solution in order to lower the storage overhead of peers.&lt;/li&gt;
  &lt;li&gt;In line with the storage optimization, the full-node light-node structure is another path to follow.&lt;/li&gt;
  &lt;li&gt;Another possible improvement is to replace the membership contract with a distributed group management scheme e.g., through distributed hash tables. This is to address possible performance issues that the interaction with the Ethereum blockchain may cause.  For example, the registration transactions are subject to delay as they have to be mined before being visible in the state of the membership contract. This means peers have to wait for some time before being able to publish any message.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;acknowledgement&quot;&gt;Acknowledgement&lt;/h1&gt;
&lt;p&gt;Thanks to Onur Kılıç for his explanation and pointers and for assisting with development and runtime issues. Also thanks to Barry Whitehat for his time and insightful comments. Special thanks to Oskar Thoren for his constructive comments and his guides during the development of this PoC and the writeup of this post.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;RLN-Relay specification: https://rfc.vac.dev/spec/17/ &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;RLN documentation: &lt;a href=&quot;https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?both&quot;&gt;https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?both&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;RLN repositories: &lt;a href=&quot;https://github.com/kilic/RLN&quot;&gt;https://github.com/kilic/RLN&lt;/a&gt; and &lt;a href=&quot;https://github.com/kilic/rlnapp&quot;&gt;https://github.com/kilic/rlnapp&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:4:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Waku v2: https://rfc.vac.dev/spec/10/ &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:16&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;GossipSub: &lt;a href=&quot;https://docs.libp2p.io/concepts/publish-subscribe/&quot;&gt;https://docs.libp2p.io/concepts/publish-subscribe/&lt;/a&gt; &lt;a href=&quot;#fnref:16&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:17&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Waku Relay: https://rfc.vac.dev/spec/11/ &lt;a href=&quot;#fnref:17&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Proof of work: &lt;a href=&quot;http://www.infosecon.net/workshop/downloads/2004/pdf/clayton.pdf&quot;&gt;http://www.infosecon.net/workshop/downloads/2004/pdf/clayton.pdf&lt;/a&gt; and &lt;a href=&quot;https://link.springer.com/content/pdf/10.1007/3-540-48071-4_10.pdf&quot;&gt;https://link.springer.com/content/pdf/10.1007/3-540-48071-4_10.pdf&lt;/a&gt; &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:8:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:9&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;EIP-627 Whisper: https://eips.ethereum.org/EIPS/eip-627 &lt;a href=&quot;#fnref:9&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Peer Scoring: &lt;a href=&quot;https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md#peer-scoring&quot;&gt;https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md#peer-scoring&lt;/a&gt; &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:6:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Peer scoring security issues: &lt;a href=&quot;https://github.com/vacp2p/research/issues/44&quot;&gt;https://github.com/vacp2p/research/issues/44&lt;/a&gt; &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:14&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Zero Knowledge Proof: &lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/3335741.3335750&quot;&gt;https://dl.acm.org/doi/abs/10.1145/3335741.3335750&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Zero-knowledge_proof&quot;&gt;https://en.wikipedia.org/wiki/Zero-knowledge_proof&lt;/a&gt; &lt;a href=&quot;#fnref:14&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:15&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;zkSNARKs: &lt;a href=&quot;https://link.springer.com/chapter/10.1007/978-3-662-49896-5_11&quot;&gt;https://link.springer.com/chapter/10.1007/978-3-662-49896-5_11&lt;/a&gt; and &lt;a href=&quot;https://coinpare.io/whitepaper/zcash.pdf&quot;&gt;https://coinpare.io/whitepaper/zcash.pdf&lt;/a&gt; &lt;a href=&quot;#fnref:15&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:13&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Shamir Secret Sharing Scheme: &lt;a href=&quot;https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing&quot;&gt;https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing&lt;/a&gt; &lt;a href=&quot;#fnref:13&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:22&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;zkSNARKs proof time: &lt;a href=&quot;https://github.com/vacp2p/research/issues/7&quot;&gt;https://github.com/vacp2p/research/issues/7&lt;/a&gt; &lt;a href=&quot;#fnref:22&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:21&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Prover key size: &lt;a href=&quot;https://github.com/vacp2p/research/issues/8&quot;&gt;https://github.com/vacp2p/research/issues/8&lt;/a&gt; &lt;a href=&quot;#fnref:21&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:19&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The lack of Shamir secret sharing in zkSNARKs: &lt;a href=&quot;https://github.com/vacp2p/research/issues/10&quot;&gt;https://github.com/vacp2p/research/issues/10&lt;/a&gt; &lt;a href=&quot;#fnref:19&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The MPC required for zkSNARKs trusted setup: &lt;a href=&quot;https://github.com/vacp2p/research/issues/9&quot;&gt;https://github.com/vacp2p/research/issues/9&lt;/a&gt; &lt;a href=&quot;#fnref:20&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:11&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Storage overhead per peer: &lt;a href=&quot;https://github.com/vacp2p/research/issues/57&quot;&gt;https://github.com/vacp2p/research/issues/57&lt;/a&gt; &lt;a href=&quot;#fnref:11&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:12&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Storage-efficient Merkle Tree maintenance: &lt;a href=&quot;https://github.com/vacp2p/research/pull/54&quot;&gt;https://github.com/vacp2p/research/pull/54&lt;/a&gt; &lt;a href=&quot;#fnref:12&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:10&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Cost-effective way of member insertion and deletion: &lt;a href=&quot;https://github.com/vacp2p/research/issues/56&quot;&gt;https://github.com/vacp2p/research/issues/56&lt;/a&gt; &lt;a href=&quot;#fnref:10&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:23&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Attack on the messaging rate: &lt;a href=&quot;https://github.com/vacp2p/specs/issues/251&quot;&gt;https://github.com/vacp2p/specs/issues/251&lt;/a&gt; &lt;a href=&quot;#fnref:23&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;RLN Benchmark: &lt;a href=&quot;https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?view#Benchmarks&quot;&gt;https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?view#Benchmarks&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>sanaztaheri</name></author><category term="research" /><summary type="html">Introduction This post is going to give you an overview of how spam protection can be achieved in Waku Relay protocol1 through Rate-Limiting Nullifiers2 3 or RLN for short. RLN-Relay specification: https://rfc.vac.dev/spec/17/ &amp;#8617; RLN documentation: https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?both &amp;#8617; RLN repositories: https://github.com/kilic/RLN and https://github.com/kilic/rlnapp &amp;#8617;</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vac.dev/assets/img/rain.png" /><media:content medium="image" url="https://vac.dev/assets/img/rain.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[Talk] Vac, Waku v2 and Ethereum Messaging</title><link href="https://vac.dev/waku-v2-ethereum-messaging" rel="alternate" type="text/html" title="[Talk] Vac, Waku v2 and Ethereum Messaging" /><published>2020-11-10T04:00:00+00:00</published><updated>2020-11-10T04:00:00+00:00</updated><id>https://vac.dev/waku-v2-ethereum-messaging</id><content type="html" xml:base="https://vac.dev/waku-v2-ethereum-messaging">&lt;p&gt;&lt;em&gt;The following post is a transcript of the talk given at the &lt;a href=&quot;https://www.meetup.com/Taipei-Ethereum-Meetup/events/274033344/&quot;&gt;Taipei Ethereum meetup, November 5&lt;/a&gt;. There is also a &lt;a href=&quot;https://www.youtube.com/watch?v=lUDy1MoeYnI&quot;&gt;video recording&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;0-introduction&quot;&gt;0. Introduction&lt;/h2&gt;

&lt;p&gt;Hi! My name is Oskar and I’m the protocol research lead at Vac. This talk will be divided into two parts. First I’ll talk about the journey from Whisper, to Waku v1 and now to Waku v2. Then I’ll talk about messaging in Ethereum. After this talk, you should have an idea of what Waku v2 is, the problems it is trying to solve, as well as where it can be useful for messaging in Ethereum.&lt;/p&gt;

&lt;h2 id=&quot;part-1---vac-and-the-journey-from-whisper-to-waku-v1-to-waku-v2&quot;&gt;PART 1 - VAC AND THE JOURNEY FROM WHISPER TO WAKU V1 TO WAKU V2&lt;/h2&gt;

&lt;h2 id=&quot;1-vac-intro&quot;&gt;1. Vac intro&lt;/h2&gt;

&lt;p&gt;First, what is Vac? Vac grew out of our efforts Status to create a window on to Ethereum and secure messenger. Vac is modular protocol stack for p2p secure messaging, paying special attention to resource restricted devices, privacy and censorship resistance.&lt;/p&gt;

&lt;p&gt;Today we are going to talk mainly about Waku v2, which is the transport privacy / routing aspect of the Vac protocol stack. It sits “above” the p2p overlay, such as libp2p dealing with transports etc, and below a conversational security layer dealing with messaging encryption, such as using Double Ratchet etc.&lt;/p&gt;

&lt;h2 id=&quot;2-whisper-to-waku-v1&quot;&gt;2. Whisper to Waku v1&lt;/h2&gt;

&lt;p&gt;In the beginning, there was Whisper. Whisper was part of the holy trinity of Ethereum. You had Ethereum for consensus/computation, Whisper for messaging, and Swarm for storage.&lt;/p&gt;

&lt;p&gt;However, for various reasons, Whisper didn’t get the attention it deserved. Development dwindled, it promised too much and it suffered from many issues, such as being extremely inefficient and not being suitable for running on e.g. mobile phone. Despite this, Status used it in its app from around 2017 to 2019. As far as I know, it was one of very few, if not the only, production uses of Whisper.&lt;/p&gt;

&lt;p&gt;In an effort to solve some of its immediate problems, we forked Whisper into Waku and formalized it with a proper specification. This solved immediate bandwidth issues for light nodes, introduced rate limiting for better spam protection, improved historical message support, etc.&lt;/p&gt;

&lt;p&gt;If you are interested in this journey, checkout the &lt;a href=&quot;https://www.youtube.com/watch?v=6lLT33tsJjs&quot;&gt;EthCC talk Dean and I gave in Paris earlier this year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Status upgraded to Waku v1 early 2020. What next?&lt;/p&gt;

&lt;h2 id=&quot;3-waku-v1-to-v2&quot;&gt;3. Waku v1 to v2&lt;/h2&gt;

&lt;p&gt;We were far from done. The changes we had made were quite incremental and done in order to get tangible improvements as quickly as possible. This meant we couldn’t address more fundamental issues related to full node routing scalability, running with libp2p for more transports, better security, better spam protection and incentivization.&lt;/p&gt;

&lt;p&gt;This kickstarted Waku v2 efforts, which is what we’ve been working on since July. This work was and is initally centered around a few pieces:&lt;/p&gt;

&lt;p&gt;(a) Moving to libp2p&lt;/p&gt;

&lt;p&gt;(b) Better routing&lt;/p&gt;

&lt;p&gt;(c) Accounting and user-run nodes&lt;/p&gt;

&lt;p&gt;The general theme was: making the Waku network more scalable and robust.&lt;/p&gt;

&lt;p&gt;We also did a scalability study to show at what point the network would run into issues, due to the inherent lack of routing that Whisper and Waku v1 provided.&lt;/p&gt;

&lt;p&gt;You can read more about this &lt;a href=&quot;https://vac.dev/waku-v2-plan&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;35-waku-v2---design-goals&quot;&gt;3.5 Waku v2 - Design goals&lt;/h2&gt;

&lt;p&gt;Taking a step back, what problem does Waku v2 attempt to solve compared to all the other solutions that exists out there? What type of applications should use it and why? We have the following design goals:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Generalized messaging&lt;/strong&gt;. Many applications requires some form of messaging protocol to communicate between different subsystems or different nodes. This messaging can be human-to-human or machine-to-machine or a mix.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Peer-to-peer&lt;/strong&gt;. These applications sometimes have requirements that make them suitable for peer-to-peer solutions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Resource restricted&lt;/strong&gt;. These applications often run in constrained environments, where resources or the environment is restricted in some fashion. E.g.:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;limited bandwidth, CPU, memory, disk, battery, etc&lt;/li&gt;
      &lt;li&gt;not being publicly connectable&lt;/li&gt;
      &lt;li&gt;only being intermittently connected; mostly-offline&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Privacy&lt;/strong&gt;. These applications have a desire for some privacy guarantees, such as pseudonymity, metadata protection in transit, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As well as to do so in a modular fashion. Meaning you can find a reasonable trade-off depending on your exact requirements. For example, you usually have to trade off some bandwidth to get metadata protection, and vice versa.&lt;/p&gt;

&lt;p&gt;The concept of designing for resource restricted devices also leads to the concept of adaptive nodes, where you have more of a continuum between full nodes and light nodes. For example, if you switch your phone from mobile data to WiFi you might be able to handle more bandwidth, and so on.&lt;/p&gt;

&lt;h2 id=&quot;4-waku-v2---breakdown&quot;&gt;4. Waku v2 - Breakdown&lt;/h2&gt;

&lt;p&gt;Where is Waku v2 at now, and how is it structured?&lt;/p&gt;

&lt;p&gt;It is running over libp2p and we had our second internal testnet last week or so. As a side note, we name our testnets after subway stations in Taipei, the first one being Nangang, and the most recent one being Dingpu.&lt;/p&gt;

&lt;p&gt;The main implementation is written in Nim using nim-libp2p, which is also powering Nimbus, an Ethereum 2 client. There is also a PoC for running Waku v2 in the browser. On a spec level, we have the following specifications that corresponds to the components that make up Waku v2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Waku v2 - this is the main spec that explains the goals of providing generalized messaging, in a p2p context, with a focus on privacy and running on resources restricted devices.&lt;/li&gt;
  &lt;li&gt;Relay - this is the main PubSub spec that provides better routing. It builds on top of GossipSub, which is what Eth2 heavily relies on as well.&lt;/li&gt;
  &lt;li&gt;Store - this is a 1-1 protocol for light nodes to get historical messages, if they are mostly-offline.&lt;/li&gt;
  &lt;li&gt;Filter - this is a 1-1 protocol for light nodes that are bandwidth restricted to only (or mostly) get messages they care about.&lt;/li&gt;
  &lt;li&gt;Message - this explains the payload, to get some basic encryption and content topics. It corresponds roughly to envelopes in Whisper/Waku v1.&lt;/li&gt;
  &lt;li&gt;Bridge - this explains how to do bridging between Waku v1 and Waku v2 for compatibility.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right now, all protocols, with the exception of bridge, are in draft mode, meaning they have been implemented but are not yet being relied upon in production.&lt;/p&gt;

&lt;p&gt;You can read more about the breakdown in this &lt;a href=&quot;https://vac.dev/waku-v2-update&quot;&gt;update&lt;/a&gt; though some progress has been made since then, as well was in the &lt;a href=&quot;https://rfc.vac.dev/spec/10&quot;&gt;main Waku v2 spec&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;5-waku-v2---upcoming&quot;&gt;5. Waku v2 - Upcoming&lt;/h2&gt;

&lt;p&gt;What’s coming up next? There are a few things.&lt;/p&gt;

&lt;p&gt;For Status to use it in production, it needs to be integrated into the main app using the Nim Node API. The bridge also needs to be implemented and tested.&lt;/p&gt;

&lt;p&gt;For other users, we are currently overhauling the API to allow usage from a browser, e.g. To make this experience great, there are also a few underlying infrastructure things that we need in nim-libp2p, such as a more secure HTTP server in Nim, Websockets and WebRTC support.&lt;/p&gt;

&lt;p&gt;There are also some changes we made to at what level content encryption happens, and this needs to be made easier to use in the API. This means you can use a node without giving your keys to it, which is useful in some environments.&lt;/p&gt;

&lt;p&gt;More generally, beyond getting to production-ready use, there are a few bigger pieces that we are working on or will work on soon. These are things like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better scaling, by using topic sharding.&lt;/li&gt;
  &lt;li&gt;Accounting and user-run nodes, to account for and incentives full nodes.&lt;/li&gt;
  &lt;li&gt;Stronger and more rigorous privacy guarantees, e.g. through study of GossipSub, unlinkable packet formats, etc.&lt;/li&gt;
  &lt;li&gt;Rate Limit Nullifier for privacy preserving spam protection, a la what Barry Whitehat has presented before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As well as better support for Ethereum M2M Messaging. Which is what I’ll talk about next.&lt;/p&gt;

&lt;h2 id=&quot;part-2---ethereum-messaging&quot;&gt;PART 2 - ETHEREUM MESSAGING&lt;/h2&gt;

&lt;p&gt;A lot of what follows is inspired by exploratory work that John Lea has done at Status, previously Head of UX Architecture at Ubuntu.&lt;/p&gt;

&lt;h2 id=&quot;6-ethereum-messaging---why&quot;&gt;6. Ethereum Messaging - Why?&lt;/h2&gt;

&lt;p&gt;It is easy to think that Waku v2 is only for human to human messaging, since that’s how Waku is currently primarily used in the Status app. However, the goal is to be useful for generalized messaging, which includes other type of information as well as machine to machine messaging.&lt;/p&gt;

&lt;p&gt;What is Ethereum M2M messaging? Going back to the Holy Trinity of Ethereum/Whisper/Swarm, the messaging component was seen as something that could facilitate messages between dapps and acts as a building block. This can help with things such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reducing on-chain transactions&lt;/li&gt;
  &lt;li&gt;Reduce latency for operations&lt;/li&gt;
  &lt;li&gt;Decentralize centrally coordinated services (like WalletConnect)&lt;/li&gt;
  &lt;li&gt;Improve UX of dapps&lt;/li&gt;
  &lt;li&gt;Broadcast live information&lt;/li&gt;
  &lt;li&gt;A message transport layer for state channels&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so on.&lt;/p&gt;

&lt;h2 id=&quot;7-ethereum-messaging---why-cont&quot;&gt;7. Ethereum Messaging - Why? (Cont)&lt;/h2&gt;

&lt;p&gt;What are some examples of practical things Waku as used for Ethereum Messaging could solve?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multisig transfers only needing one on chain transaction&lt;/li&gt;
  &lt;li&gt;DAO votes only needing one one chain transaction&lt;/li&gt;
  &lt;li&gt;Giving dapps ability to direct push notifications to users&lt;/li&gt;
  &lt;li&gt;Giving users ability to directly respond to requests from daps&lt;/li&gt;
  &lt;li&gt;Decentralized Wallet Connect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Etc.&lt;/p&gt;

&lt;h2 id=&quot;8-whats-needed-to-deliver-this&quot;&gt;8. What’s needed to deliver this?&lt;/h2&gt;

&lt;p&gt;We can break it down into our actors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Decentralized M2M messaging system (Waku)&lt;/li&gt;
  &lt;li&gt;Native wallets (Argent, Metamask, Status, etc)&lt;/li&gt;
  &lt;li&gt;Dapps that benefit from M2M messaging&lt;/li&gt;
  &lt;li&gt;Users whose problems are being solved&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these has a bunch of requirements in turn. The messaging system needs to be decentralized, scalable, robust, etc. Wallets need support for messaging layer, dapps need to integrate this, etc.&lt;/p&gt;

&lt;p&gt;This is a lot! Growing adoption is a challenge. There is a catch 22 in terms of justifying development efforts for wallets, when no dapps need it, and likewise for dapps when no wallets support Waku. In addition to this, there must be proven usage of Waku before it can be relied on, etc. How can we break this up into smaller pieces of work?&lt;/p&gt;

&lt;h2 id=&quot;9-breaking-up-the-problem-and-a-high-level-roadmap&quot;&gt;9. Breaking up the problem and a high level roadmap&lt;/h2&gt;

&lt;p&gt;We can start small. It doesn’t and need to be used for critical features first. A more hybrid approach can be taken where it acts more as nice-to-haves.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Forking Whisper and solving scalablity, spam etc issues with it.
This is a work in progress. What we talked about in part 1.&lt;/li&gt;
  &lt;li&gt;Expose messaging API for Dapp developers.&lt;/li&gt;
  &lt;li&gt;Implement decentralized version of WalletConnect.
Currently wallets connect ot dapps with centralized service. Great UX.&lt;/li&gt;
  &lt;li&gt;Solve DAO/Multi-Sig coordination problem.
E.g. send message to wallet-derived key when it is time to sign a transaction.&lt;/li&gt;
  &lt;li&gt;Extend dapp-to-user and user-to-dapp communication to more dapps.
Use lessons learned and examples to drive adoptation for wallets/dapps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And then build up from there.&lt;/p&gt;

&lt;h2 id=&quot;10-we-are-hiring&quot;&gt;10. We are hiring!&lt;/h2&gt;

&lt;p&gt;A lot of this will happen in Javascript and browsers, since that’s the primarily environment for a lot of wallets and dapps. We are currently hiring for a Waku JS Wallet integration lead to help push this effort further.&lt;/p&gt;

&lt;p&gt;Come talk to me after or &lt;a href=&quot;https://status.im/our_team/open_positions.html?gh_jid=2385338&quot;&gt;apply here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s it! You can find us on Status, Telegram, vac.dev. I’m on twitter &lt;a href=&quot;https://twitter.com/oskarth&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Questions?&lt;/p&gt;

&lt;hr /&gt;</content><author><name>oskarth</name></author><category term="research" /><summary type="html">The following post is a transcript of the talk given at the Taipei Ethereum meetup, November 5. There is also a video recording.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vac.dev/assets/img/taipei_ethereum_meetup_slide.png" /><media:content medium="image" url="https://vac.dev/assets/img/taipei_ethereum_meetup_slide.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Waku v2 Update</title><link href="https://vac.dev/waku-v2-update" rel="alternate" type="text/html" title="Waku v2 Update" /><published>2020-09-28T04:00:00+00:00</published><updated>2020-09-28T04:00:00+00:00</updated><id>https://vac.dev/waku-v2-update</id><content type="html" xml:base="https://vac.dev/waku-v2-update">&lt;p&gt;It has been a while since the last post. It is time for an update on Waku v2. Aside from getting more familiar with libp2p (specifically nim-libp2p) and some vacation, what have we been up to? In this post we’ll talk about what we’ve gotten done since last time, and briefly talk about immediate next steps and future. But first, a recap.&lt;/p&gt;

&lt;h1 id=&quot;recap&quot;&gt;Recap&lt;/h1&gt;

&lt;p&gt;In the last post (&lt;a href=&quot;https://vac.dev/waku-v2-plan&quot;&gt;Waku v2 plan&lt;/a&gt;) we explained the rationale of Waku v2 - the current Waku network is fragile and doesn’t scale. To solve this, Waku v2 aims to reduce amplification factors and get more user run nodes. We broke the work down into three separate tracks.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Track 1 - Move to libp2p&lt;/li&gt;
  &lt;li&gt;Track 2 - Better routing&lt;/li&gt;
  &lt;li&gt;Track 3 - Accounting and user-run nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As well as various rough components for each track. The primary initial focus is track 1. This means things like: moving to FloodSub, simplify the protocol, core integration, topic interest behavior, historical message caching, and Waku v1&amp;lt;&amp;gt;v2 bridge.&lt;/p&gt;

&lt;h1 id=&quot;current-state&quot;&gt;Current state&lt;/h1&gt;

&lt;p&gt;Let’s talk about the state of specs and our main implementation nim-waku. Then we’ll go over our recent testnet, Nangang, and finish off with a Web PoC.&lt;/p&gt;

&lt;h2 id=&quot;specs&quot;&gt;Specs&lt;/h2&gt;

&lt;p&gt;After some back and forth on how to best structure things, we ended up breaking down the specs into a few pieces. While Waku v2 is best thought of as a cohesive whole in terms of its capabilities, it is made up of several protocols. Here’s a list of the current specs and their status:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/10/&quot;&gt;Main spec&lt;/a&gt; (draft)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/11/&quot;&gt;Relay protocol spec&lt;/a&gt; (draft)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/12&quot;&gt;Filter protocol spec&lt;/a&gt; (raw)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/13&quot;&gt;Store protocol spec&lt;/a&gt; (raw)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rfc.vac.dev/spec/15/&quot;&gt;Bridge spec&lt;/a&gt; (raw)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Raw means there is not yet an implementation that corresponds fully to the spec, and draft means there is an implementation that corresponds to the spec. In the interest of space, we won’t go into too much detail on the specs here except to note a few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The relay spec is essentially a thin wrapper on top of PubSub/FloodSub/GossipSub&lt;/li&gt;
  &lt;li&gt;The filter protocol corresponds to previous light client mode in Waku v1&lt;/li&gt;
  &lt;li&gt;The store protocol corresponds to the previous mailserver construct in Waku v1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The filter and store protocol allow for adaptive nodes, i.e. nodes that have various capabilities. For example, a node being mostly offline, or having limited bandwidth capacity. The bridge spec outlines how to bridge the Waku v1 and v2 networks.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;The main implementation we are working on is &lt;a href=&quot;https://github.com/status-im/nim-waku/&quot;&gt;nim-waku&lt;/a&gt;. This builds on top of libraries such as &lt;a href=&quot;https://github.com/status-im/nim-libp2p&quot;&gt;nim-libp2p&lt;/a&gt; and others that the &lt;a href=&quot;https://nimbus.team/&quot;&gt;Nimbus team&lt;/a&gt; have been working on as part of their Ethereum 2.0 client.&lt;/p&gt;

&lt;p&gt;Currently nim-waku implements the relay protocol, and is close to implementing filter and store protocol. It also exposes a &lt;a href=&quot;https://github.com/status-im/nim-waku/blob/master/docs/api/v2/node.md&quot;&gt;Nim Node API&lt;/a&gt; that allows libraries such as &lt;a href=&quot;https://github.com/status-im/status-nim&quot;&gt;nim-status&lt;/a&gt; to use it. Additionally, there is also a rudimentary JSON RPC API for command line scripting.&lt;/p&gt;

&lt;h2 id=&quot;nangang-testnet&quot;&gt;Nangang testnet&lt;/h2&gt;

&lt;p&gt;Last week we launched a very rudimentary internal testnet called Nangang. The goal was to test basic connectivity and make sure things work end to end. It didn’t have things like: client integration, encryption, bridging, multiple clients, store/filter protocol, or even a real interface. What it did do is allow Waku developers to “chat” via RPC calls and looking in the log output. Doing this meant we exposed and fixed a few blockers, such as connection issues, deployment, topic subscription management, protocol and node integration, and basic scripting/API usage. After this, we felt confident enough to upgrade the main and relay spec to “draft” status.&lt;/p&gt;

&lt;h2 id=&quot;waku-web-poc&quot;&gt;Waku Web PoC&lt;/h2&gt;

&lt;p&gt;As a bonus, we wanted to see what it’d take to get Waku running in a browser. This is a very powerful capability that enables a lot of use cases, and something that libp2p enables with its multiple transport support.&lt;/p&gt;

&lt;p&gt;Using the current stack, with nim-waku, would require quite a lot of ground work with WASM, WebRTC, Websockets support etc. Instead, we decided to take a shortcut and hack together a JS implementation called &lt;a href=&quot;https://github.com/vacp2p/waku-web-chat/&quot;&gt;Waku Web Chat&lt;/a&gt;. This quick hack wouldn’t be possible without the people behind &lt;a href=&quot;https://github.com/libp2p/js-libp2p-examples/&quot;&gt;js-libp2p-examples&lt;/a&gt; and &lt;a href=&quot;https://github.com/libp2p/js-libp2p&quot;&gt;js-libp2p&lt;/a&gt; and all its libraries. These are people like Jacob Heun, Vasco Santos, and Cayman Nava. Thanks!&lt;/p&gt;

&lt;p&gt;It consists of a brower implementation, a NodeJS implementation and a bootstrap server that acts as a signaling server for WebRTC. It is largely a bastardized version of GossipSub, and while it isn’t completely to spec, it does allow messages originating from a browser to eventually end up at a nim-waku node, and vice versa. Which is pretty cool.&lt;/p&gt;

&lt;h1 id=&quot;coming-up&quot;&gt;Coming up&lt;/h1&gt;

&lt;p&gt;Now that we know what the current state is, what is still missing? what are the next steps?&lt;/p&gt;

&lt;h2 id=&quot;things-that-are-missing&quot;&gt;Things that are missing&lt;/h2&gt;

&lt;p&gt;While we are getting closer to closing out work for track 1, there are still a few things missing from the initial scope:&lt;/p&gt;

&lt;p&gt;1) Store and filter protocols need to be finished. This means basic spec, implementation, API integration and proven to work in a testnet. All of these are work in progress and expected to be done very soon. Once the store protocol is done in a basic form, it needs further improvements to make it production ready, at least on a spec/basic implementation level.&lt;/p&gt;

&lt;p&gt;2) Core integration was mentioned in scope for track 1 initially. This work has stalled a bit, largely due to organizational bandwidth and priorities. While there is a Nim Node API that in theory is ready to be used, having it be used in e.g. Status desktop or mobile app is a different matter. The team responsible for this at Status (&lt;a href=&quot;https://github.com/status-im/status-nim&quot;&gt;status-nim&lt;/a&gt; has been making progress on getting nim-waku v1 integrated, and is expected to look into nim-waku v2 integration soon. One thing that makes this a especially tricky is the difference in interface between Waku v1 and v2, which brings
us too…&lt;/p&gt;

&lt;p&gt;3) Companion spec for encryption. As part of simplifying the protocol, the routing is decoupled from the encryption in v2 (&lt;a href=&quot;https://github.com/vacp2p/specs/issues/158&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://github.com/vacp2p/specs/issues/181&quot;&gt;2&lt;/a&gt;). There are multiple layers of encryption at play here, and we need to figure out a design that makes sense for various use cases (dapps using Waku on their own, Status app, etc).&lt;/p&gt;

&lt;p&gt;4) Bridge implementation. The spec is done and we know how it should work, but it needs to be implemented.&lt;/p&gt;

&lt;p&gt;5) General tightening up of specs and implementation.&lt;/p&gt;

&lt;p&gt;While this might seem like a lot, a lot has been done already, and the majority of the remaining tasks are more amendable to be pursued in parallel with other efforts. It is also worth mentioning that part of track 2 and 3 have been started, in the form of moving to GossipSub (amplification factors) and basics of adaptive nodes (multiple protocols). This is in addition to things like Waku Web which were not part of the initial scope.&lt;/p&gt;

&lt;h2 id=&quot;upcoming&quot;&gt;Upcoming&lt;/h2&gt;

&lt;p&gt;Aside from the things mentioned above, what is coming up next? There are a few areas of interest, mentioned in no particular order. For track 2 and 3, see previous post for more details.&lt;/p&gt;

&lt;p&gt;1) Better routing (track 2). While we are already building on top of GossipSub, we still need to explore things like topic sharding in more detail to further reduce amplification factors.&lt;/p&gt;

&lt;p&gt;2) Accounting and user-run nodes (track 3). With store and filter protocol getting ready, we can start to implement accounting and light connection game for incentivization in a bottom up and iterative manner.&lt;/p&gt;

&lt;p&gt;3) Privacy research. Study better and more rigorous privacy guarantees. E.g. how FloodSub/GossipSub behaves for common threat models, and how custom packet
format can improve things like unlinkability.&lt;/p&gt;

&lt;p&gt;4) zkSnarks RLN for spam protection and incentivization. We studied this &lt;a href=&quot;https://vac.dev/feasibility-semaphore-rate-limiting-zksnarks&quot;&gt;last year&lt;/a&gt; and recent developments have made this relevant to study again. Create an &lt;a href=&quot;https://github.com/vacp2p/specs/issues/189&quot;&gt;experimental spec/PoC&lt;/a&gt; as an extension to the relay protocol. Kudos to Barry Whitehat and others like Kobi Gurkan and Koh Wei Jie for pushing this!&lt;/p&gt;

&lt;p&gt;5) Ethereum M2M messaging. Being able to run in the browser opens up a lot of doors, and there is an opportunity here to enable things like a decentralized WalletConnect, multi-sig transactions, voting and similar use cases. This was the original goal of Whisper, and we’d like to deliver on that.&lt;/p&gt;

&lt;p&gt;As you can tell, quite a lot of thing! Luckily, we have two people joining as protocol engineers soon, which will bring much needed support for the current team of ~2-2.5 people. More details to come in further updates.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you are feeling adventurous and want to use early stage alpha software, check out the &lt;a href=&quot;https://github.com/status-im/nim-waku/tree/master/docs&quot;&gt;docs&lt;/a&gt;. If you want to read the specs, head over to &lt;a href=&quot;https://rfc.vac.dev/spec/10/&quot;&gt;Waku spec&lt;/a&gt;. If you want to talk with us, join us on &lt;a href=&quot;https://get.status.im/chat/public/vac&quot;&gt;Status&lt;/a&gt; or on &lt;a href=&quot;https://t.me/vacp2p&quot;&gt;Telegram&lt;/a&gt; (they are bridged).&lt;/p&gt;</content><author><name>oskarth</name></author><category term="research" /><summary type="html">It has been a while since the last post. It is time for an update on Waku v2. Aside from getting more familiar with libp2p (specifically nim-libp2p) and some vacation, what have we been up to? In this post we’ll talk about what we’ve gotten done since last time, and briefly talk about immediate next steps and future. But first, a recap.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vac.dev/assets/img/vac.png" /><media:content medium="image" url="https://vac.dev/assets/img/vac.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>